# File: ./src\api.tsx
// src/api.ts
import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:8000",
  withCredentials: true, // si tu utilises des cookies (optionnel)
});

export default api;

// Dans api.ts
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token"); // ou selon ta logique
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});


# File: ./src\App.css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


# File: ./src\App.tsx
import React from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import Layout from './components/common/Layout.tsx'
import PredictionDashboard from './pages/PredictionDashboard.tsx'
import PredictionExplanation from './pages/PredictionExplanation.tsx'
import EnterpriseAccountManagement from './components/module1/EnterpriseAccountManagement.tsx'
import UserRoleManagement from './components/module1/UserRoleManagement.tsx'
import ProductCatalog from './components/module1/ProductCatalog.tsx'
import ImportSyncModule from './components/module1/ImportSyncModule.tsx'
import CreateEntreprise from './components/module1/CreateEntreprise.tsx'
import ListEntreprise from './components/module1/ListEntreprise.tsx'
import PredictionModule from './components/common/PredictionModule.tsx'

const App = () => {
  return (
    <Router>
      <Routes>
        <Route element={<Layout />}>
          <Route path="/dashboard" element={<PredictionDashboard />} />
          <Route path="/analytics" element={<PredictionExplanation />} />
          <Route path="/prediction" element={<PredictionModule />} />
          <Route path="/account-management" element={<EnterpriseAccountManagement />} />
          <Route path="/user-management" element={<UserRoleManagement />} />
          <Route path="/catalog-management" element={<ProductCatalog />} />
          <Route path="/vente" element={<ImportSyncModule />} />
          <Route path="/entreprise" element={<ListEntreprise />} />
        </Route>
          <Route path="/" element={<CreateEntreprise />} />
      </Routes>
    </Router>
  )
}

export default App


# File: ./src\index.css
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


# File: ./src\main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles/global.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

# File: ./src\styles.css
@import "tailwindcss";

# File: ./src\vite-env.d.ts
/// <reference types="vite/client" />


# File: ./src\components\common\Layout.tsx
import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  Package, 
  Settings, 
  Bell, 
  User, 
  Menu,
  X,
  Home,
  Database,
  Brain,
  LogOut,
  Shield,
  Eye,
  EyeOff,
  Lock,
  Mail
} from 'lucide-react';
import { Outlet, useLocation, useNavigate } from 'react-router-dom';

// Composant de connexion
const LoginForm = ({ onLogin }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async () => {
    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('http://localhost:8000/api/v1/login/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams({
          username: formData.email,
          password: formData.password
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Erreur de connexion');
      }

      const data = await response.json();

      const userData = {
        id: data.user.id,
        name: data.user.email.split('@')[0], // ou autre champ si tu veux
        email: data.user.email,
        company: data.user.companies?.[0]?.name || '',
        role: data.user.companies?.[0]?.role || '',
        token: data.access_token
      };

      // Stockage local
      localStorage.setItem('inventoryai_user', JSON.stringify(userData));
      localStorage.setItem('inventoryai_token', data.access_token);

      // Envoi au layout
      onLogin(userData);
    } catch (err) {
      setError(err.message || 'Erreur de connexion');
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4">
            <Brain className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900">InventoryAI</h1>
          <p className="text-gray-600 mt-2">Connectez-vous à votre compte</p>
        </div>

        <div className="space-y-6">
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-800 text-sm">{error}</p>
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Adresse email
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({...formData, email: e.target.value})}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="admin@exemple.com"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Mot de passe
            </label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type={showPassword ? "text" : "password"}
                value={formData.password}
                onChange={(e) => setFormData({...formData, password: e.target.value})}
                className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="••••••••"
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
              >
                {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
              </button>
            </div>
          </div>

          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <input type="checkbox" className="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" />
              <span className="ml-2 text-sm text-gray-600">Se souvenir de moi</span>
            </label>
            <a href="#" className="text-sm text-blue-600 hover:text-blue-500">
              Mot de passe oublié ?
            </a>
          </div>

          <button
            onClick={handleSubmit}
            disabled={isLoading}
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isLoading ? 'Connexion...' : 'Se connecter'}
          </button>
        </div>

        <div className="mt-8 pt-6 border-t border-gray-200">
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-800 mb-2">
              <Shield className="inline w-4 h-4 mr-2" />
              Compte de démonstration
            </h3>
            <p className="text-xs text-gray-600">
              Email: rai@exemple.com<br />
              Mot de passe: rai
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Menu utilisateur avec déconnexion
const UserMenu = ({ user, onLogout }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 cursor-pointer"
      >
        <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
          <User size={16} className="text-white" />
        </div>
        <div className="hidden sm:block text-left">
          <p className="text-sm font-medium text-gray-900">{user.name}</p>
          <p className="text-xs text-gray-500">{user.company}</p>
        </div>
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
          <div className="p-4 border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
                <User size={20} className="text-white" />
              </div>
              <div>
                <p className="font-medium text-gray-900">{user.name}</p>
                <p className="text-sm text-gray-500">{user.email}</p>
                <p className="text-xs text-gray-400">{user.role}</p>
              </div>
            </div>
          </div>
          
          <div className="p-2">
            <button
              onClick={() => {
                setIsOpen(false);
                // Redirection vers profil
              }}
              className="w-full flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md"
            >
              <User size={16} />
              Mon profil
            </button>
            <button
              onClick={() => {
                setIsOpen(false);
                // Redirection vers paramètres
              }}
              className="w-full flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md"
            >
              <Settings size={16} />
              Paramètres
            </button>
            <hr className="my-2" />
            <button
              onClick={() => {
                setIsOpen(false);
                onLogout();
              }}
              className="w-full flex items-center gap-2 px-3 py-2 text-sm text-red-600 hover:bg-red-50 rounded-md"
            >
              <LogOut size={16} />
              Se déconnecter
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Layout principal avec authentification
const Layout = () => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const location = useLocation();
  const navigate = useNavigate();

  const menuItems = [
    { id: 'dashboard', label: 'Tableau de Bord', icon: Home, path: '/dashboard' },
    { id: 'prediction', label: 'Prédiction Demande', icon: Brain, path: '/prediction' },
    { id: 'optimization', label: 'Optimisation Stock', icon: Package, path: '/catalog-management' },
    { id: 'analytics', label: 'Analytics', icon: BarChart3, path: '/analytics' },
    { id: 'users', label: 'Gestion des utilisateurs', icon: BarChart3, path: '/user-management' },
    { id: 'data', label: 'Données', icon: Database, path: '/account-management' },
    { id: 'settings', label: 'Informations Entreprises', icon: Database, path: '/entreprise' },
    { id: 'vente', label: 'Vente', icon: Settings, path: '/vente' },
  ];

  // Vérification de l'authentification au chargement
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // Simulation de vérification du token
        const savedUser = localStorage.getItem('inventoryai_user');
        if (savedUser) {
          setUser(JSON.parse(savedUser));
        }
      } catch (error) {
        console.error('Erreur de vérification d\'authentification:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const handleLogin = (userData) => {
    setUser(userData);
    localStorage.setItem('inventoryai_user', JSON.stringify(userData));
  };

  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('token');
  };

  // Écran de chargement
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4">
            <Brain className="w-8 h-8 text-white animate-pulse" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">InventoryAI</h1>
          <p className="text-gray-600">Chargement...</p>
        </div>
      </div>
    );
  }

  // Écran de connexion si non authentifié
  if (!user) {
    return <LoginForm onLogin={handleLogin} />;
  }

  // Layout principal pour utilisateur authentifié
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sidebar fixe */}
      {sidebarOpen && (
        <aside className="fixed top-0 left-0 w-64 h-screen bg-white shadow-lg z-40 flex flex-col">
          <nav className="flex-1 p-4 space-y-3 overflow-y-auto">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = location.pathname.startsWith(item.path);
              return (
                <button
                  key={item.id}
                  onClick={() => navigate(item.path)}
                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-base font-semibold transition-colors text-left
                    ${isActive ? 'bg-blue-100 text-blue-700' : 'text-gray-700 hover:bg-gray-100'}`}
                >
                  <Icon size={20} />
                  {item.label}
                </button>
              );
            })}
          </nav>
          <div className="p-4 border-t border-gray-200">
            <div className="bg-blue-50 rounded-lg p-3">
              <h3 className="text-sm font-medium text-blue-900 mb-1">
                Connecté en tant que
              </h3>
              <p className="text-xs text-blue-700 mb-1">
                {user.name} • {user.role}
              </p>
              <p className="text-xs text-blue-600">
                {user.company}
              </p>
            </div>
          </div>
        </aside>
      )}


      <div className={`flex flex-col min-h-screen ${sidebarOpen ? 'pl-64' : ''}`}>

        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
          <div className="flex items-center justify-between px-4 py-3">
            <div className="flex items-center gap-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="p-2 rounded-lg hover:bg-gray-100"
              >
                {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
              </button>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <Brain className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">InventoryAI</h1>
                  <p className="text-xs text-gray-500">Enterprise</p>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <button className="p-2 rounded-lg hover:bg-gray-100 relative">
                <Bell size={20} className="text-gray-600" />
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
              </button>
              
              <UserMenu user={user} onLogout={handleLogout} />
            </div>
          </div>
        </header>

        {/* Contenu principal */}
        <main className="flex-1 overflow-y-auto p-6 bg-gray-50">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default Layout;

# File: ./src\components\common\PredictionModule.tsx
import React, { useState, useEffect } from 'react';
import { 
  TrendingUp, 
  BarChart3, 
  Calendar, 
  Target, 
  AlertCircle,
  Search,
  Filter,
  Download,
  RefreshCw,
  Info,
  ChevronDown,
  Package,
  Brain,
  Activity,
  Zap
} from 'lucide-react';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer, 
  Area, 
  AreaChart, 
  Bar, 
  BarChart,
  PieChart,
  Pie,
  Cell
} from 'recharts';

// Données de démonstration
const mockProducts = [
  { id: 1, name: 'Smartphone Galaxy S24', sku: 'TECH-001', currentStock: 45, category: 'Électronique', price: 899 },
  { id: 2, name: 'Laptop Dell XPS 13', sku: 'TECH-002', currentStock: 23, category: 'Électronique', price: 1299 },
  { id: 3, name: 'Casque Audio Sony', sku: 'TECH-003', currentStock: 67, category: 'Audio', price: 199 },
  { id: 4, name: 'Montre Apple Watch', sku: 'TECH-004', currentStock: 34, category: 'Wearables', price: 399 },
  { id: 5, name: 'Tablette iPad Pro', sku: 'TECH-005', currentStock: 28, category: 'Électronique', price: 1099 }
];

const mockPredictionData = [
  { date: '2025-01-01', actualSales: 25, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-02', actualSales: 32, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-03', actualSales: 28, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-04', actualSales: 35, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-05', actualSales: 42, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-06', actualSales: 38, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-07', actualSales: 45, prediction: null, confidenceUpper: null, confidenceLower: null },
  { date: '2025-01-08', actualSales: null, prediction: 48, confidenceUpper: 55, confidenceLower: 41 },
  { date: '2025-01-09', actualSales: null, prediction: 52, confidenceUpper: 59, confidenceLower: 45 },
  { date: '2025-01-10', actualSales: null, prediction: 47, confidenceUpper: 54, confidenceLower: 40 },
  { date: '2025-01-11', actualSales: null, prediction: 51, confidenceUpper: 58, confidenceLower: 44 },
  { date: '2025-01-12', actualSales: null, prediction: 49, confidenceUpper: 56, confidenceLower: 42 },
  { date: '2025-01-13', actualSales: null, prediction: 53, confidenceUpper: 60, confidenceLower: 46 },
  { date: '2025-01-14', actualSales: null, prediction: 55, confidenceUpper: 62, confidenceLower: 48 }
];

const mockAggregatedData = [
  { category: 'Électronique', predicted: 1250, actual: 1180, confidence: 87 },
  { category: 'Audio', predicted: 890, actual: 920, confidence: 92 },
  { category: 'Wearables', predicted: 450, actual: 430, confidence: 89 },
  { category: 'Accessoires', predicted: 320, actual: 310, confidence: 94 }
];

// Composant pour le sélecteur de produit
const ProductSelector = ({ selectedProduct, onProductChange, products, loading }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.sku.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="relative">
      <div className="flex items-center gap-2 p-3 border border-gray-300 rounded-lg bg-white hover:border-blue-400 transition-colors">
        <Search size={18} className="text-gray-400" />
        <input
          type="text"
          placeholder={selectedProduct ? `${selectedProduct.name} (${selectedProduct.sku})` : "Rechercher un produit..."}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setShowDropdown(true)}
          className="flex-1 outline-none text-sm"
        />
        <ChevronDown size={18} className="text-gray-400" />
      </div>

      {showDropdown && (
        <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto z-10">
          {filteredProducts.map((product) => (
            <div
              key={product.id}
              className={`p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors ${
                selectedProduct?.id === product.id ? 'bg-blue-50 border-blue-200' : ''
              }`}
              onClick={() => {
                onProductChange(product);
                setSearchTerm('');
                setShowDropdown(false);
              }}
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{product.name}</p>
                  <p className="text-sm text-gray-500">SKU: {product.sku}</p>
                  <p className="text-xs text-blue-600 font-medium">{product.category}</p>
                </div>
                <div className="text-right">
                  <p className="text-sm font-medium text-gray-900">{product.currentStock} unités</p>
                  <p className="text-xs text-gray-500">{product.price}€</p>
                </div>
              </div>
            </div>
          ))}
          
          {filteredProducts.length === 0 && (
            <div className="p-4 text-center text-gray-500">
              <Package size={24} className="mx-auto mb-2 text-gray-300" />
              Aucun produit trouvé
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Composant pour les métriques clés
const MetricsCards = ({ predictions, selectedProduct }) => {
  const metrics = [
    {
      label: 'Prédiction 30 jours',
      value: predictions?.next30Days || 1247,
      unit: 'unités',
      change: '+12%',
      changeType: 'positive',
      icon: TrendingUp,
      bgColor: 'bg-blue-50',
      iconColor: 'text-blue-600'
    },
    {
      label: 'Prédiction 60 jours',
      value: predictions?.next60Days || 2384,
      unit: 'unités',
      change: '+8%',
      changeType: 'positive',
      icon: BarChart3,
      bgColor: 'bg-green-50',
      iconColor: 'text-green-600'
    },
    {
      label: 'Prédiction 90 jours',
      value: predictions?.next90Days || 3521,
      unit: 'unités',
      change: '+15%',
      changeType: 'positive',
      icon: Target,
      bgColor: 'bg-purple-50',
      iconColor: 'text-purple-600'
    },
    {
      label: 'Précision du modèle',
      value: predictions?.modelAccuracy || 92,
      unit: '%',
      change: '+2%',
      changeType: 'positive',
      icon: Brain,
      bgColor: 'bg-orange-50',
      iconColor: 'text-orange-600'
    }
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      {metrics.map((metric, index) => {
        const Icon = metric.icon;
        return (
          <div key={index} className={`${metric.bgColor} rounded-lg p-4 border border-gray-100`}>
            <div className="flex items-center justify-between mb-3">
              <div className={`p-2 rounded-lg bg-white ${metric.iconColor}`}>
                <Icon size={20} />
              </div>
              <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                metric.changeType === 'positive' 
                  ? 'bg-green-100 text-green-700' 
                  : 'bg-red-100 text-red-700'
              }`}>
                {metric.change}
              </span>
            </div>
            <div className="text-2xl font-bold text-gray-900 mb-1">
              {typeof metric.value === 'number' ? metric.value.toLocaleString() : metric.value}
              <span className="text-sm font-normal text-gray-500 ml-1">{metric.unit}</span>
            </div>
            <div className="text-sm text-gray-600 font-medium">
              {metric.label}
            </div>
          </div>
        );
      })}
    </div>
  );
};

// Composant pour le graphique de prédiction principal
const PredictionChart = ({ data, selectedProduct, loading }) => {
  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-center h-96">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-3"></div>
            <p className="text-gray-500">Chargement des prédictions...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-1">Prédiction de la Demande</h3>
          <p className="text-sm text-gray-600">
            {selectedProduct ? `${selectedProduct.name} (${selectedProduct.sku})` : 'Sélectionnez un produit'}
          </p>
        </div>
        <div className="flex items-center gap-2">
          <button className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center gap-2">
            <Download size={16} />
            Exporter
          </button>
          <button className="px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
            <RefreshCw size={16} />
            Actualiser
          </button>
        </div>
      </div>

      <div className="h-96">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <defs>
              <linearGradient id="confidenceGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.1}/>
                <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
              </linearGradient>
              <linearGradient id="predictionGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#10b981" stopOpacity={0.3}/>
                <stop offset="95%" stopColor="#10b981" stopOpacity={0}/>
              </linearGradient>
            </defs>
            
            <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
            <XAxis 
              dataKey="date" 
              tick={{ fontSize: 12, fill: '#6b7280' }}
              tickFormatter={(value) => new Date(value).toLocaleDateString('fr-FR', { 
                month: 'short', 
                day: 'numeric' 
              })}
            />
            <YAxis 
              tick={{ fontSize: 12, fill: '#6b7280' }}
              label={{ value: 'Quantité', angle: -90, position: 'insideLeft' }}
            />
            
            <Tooltip 
              labelFormatter={(value) => new Date(value).toLocaleDateString('fr-FR')}
              formatter={(value, name) => [
                `${value} unités`,
                name === 'actualSales' ? 'Ventes réelles' : 
                name === 'prediction' ? 'Prédiction' : 
                name === 'confidenceUpper' ? 'Limite haute' : 'Limite basse'
              ]}
              contentStyle={{
                backgroundColor: 'white',
                border: '1px solid #e5e7eb',
                borderRadius: '8px',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
              }}
            />
            
            {/* Zone de confiance */}
            <Area
              type="monotone"
              dataKey="confidenceUpper"
              stackId="1"
              stroke="none"
              fill="url(#confidenceGradient)"
            />
            <Area
              type="monotone"
              dataKey="confidenceLower"
              stackId="1"
              stroke="none"
              fill="white"
            />
            
            {/* Ligne des ventes réelles */}
            <Line
              type="monotone"
              dataKey="actualSales"
              stroke="#6b7280"
              strokeWidth={2}
              dot={{ fill: '#6b7280', strokeWidth: 2, r: 4 }}
              connectNulls={false}
            />
            
            {/* Ligne de prédiction */}
            <Line
              type="monotone"
              dataKey="prediction"
              stroke="#10b981"
              strokeWidth={3}
              strokeDasharray="5 5"
              dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}
              connectNulls={false}
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      {/* Légende */}
      <div className="flex justify-center gap-6 mt-4 text-sm">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-gray-500 rounded-full"></div>
          <span>Ventes réelles</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          <span>Prédiction</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-blue-300 rounded-full"></div>
          <span>Intervalle de confiance</span>
        </div>
      </div>
    </div>
  );
};

// Composant pour les prédictions agrégées
const AggregatedPredictions = ({ data }) => {
  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'];

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-1">Prédictions par Catégorie</h3>
          <p className="text-sm text-gray-600">Vue d'ensemble des prédictions de demande</p>
        </div>
        <div className="flex items-center gap-2">
          <Activity size={16} className="text-blue-600" />
          <span className="text-sm text-gray-600">Temps réel</span>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Graphique en barres */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Comparaison Prédiction vs Réel</h4>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                <XAxis 
                  dataKey="category" 
                  tick={{ fontSize: 12, fill: '#6b7280' }}
                  angle={-45}
                  textAnchor="end"
                  height={80}
                />
                <YAxis tick={{ fontSize: 12, fill: '#6b7280' }} />
                <Tooltip 
                  formatter={(value, name) => [
                    `${value} unités`,
                    name === 'predicted' ? 'Prédiction' : 'Réel'
                  ]}
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px'
                  }}
                />
                <Bar dataKey="predicted" fill="#3b82f6" name="Prédiction" radius={[2, 2, 0, 0]} />
                <Bar dataKey="actual" fill="#10b981" name="Réel" radius={[2, 2, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Graphique en secteurs pour la répartition */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Répartition des Prédictions</h4>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={data}
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="predicted"
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [`${value} unités`, 'Prédiction']} />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Tableau de détails */}
      <div className="mt-6">
        <h4 className="text-sm font-medium text-gray-700 mb-3">Détails par Catégorie</h4>
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-2 text-left font-medium text-gray-700">Catégorie</th>
                <th className="px-4 py-2 text-right font-medium text-gray-700">Prédiction</th>
                <th className="px-4 py-2 text-right font-medium text-gray-700">Réel</th>
                <th className="px-4 py-2 text-right font-medium text-gray-700">Écart</th>
                <th className="px-4 py-2 text-right font-medium text-gray-700">Précision</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {data.map((item, index) => {
                const difference = item.predicted - item.actual;
                const percentageDiff = ((difference / item.actual) * 100).toFixed(1);
                
                return (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-4 py-3 font-medium text-gray-900">{item.category}</td>
                    <td className="px-4 py-3 text-right text-gray-900">{item.predicted.toLocaleString()}</td>
                    <td className="px-4 py-3 text-right text-gray-900">{item.actual.toLocaleString()}</td>
                    <td className={`px-4 py-3 text-right font-medium ${
                      difference > 0 ? 'text-red-600' : 'text-green-600'
                    }`}>
                      {difference > 0 ? '+' : ''}{difference}
                    </td>
                    <td className="px-4 py-3 text-right">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        item.confidence >= 90 ? 'bg-green-100 text-green-700' :
                        item.confidence >= 80 ? 'bg-yellow-100 text-yellow-700' :
                        'bg-red-100 text-red-700'
                      }`}>
                        {item.confidence}%
                      </span>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// Composant principal du module
const PredictionModule = () => {
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [predictionData, setPredictionData] = useState(mockPredictionData);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('individual');

  const handleProductChange = (product) => {
    setSelectedProduct(product);
    setLoading(true);
    
    // Simuler un appel API
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* En-tête du module */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-3 bg-blue-600 rounded-lg">
              <Brain className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Module de Prédiction de la Demande</h1>
              <p className="text-gray-600">Analyse prédictive avancée pour optimiser votre inventaire</p>
            </div>
          </div>

          {/* Onglets */}
          <div className="flex border-b border-gray-200">
            <button
              onClick={() => setActiveTab('individual')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'individual'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Prédictions Individuelles
            </button>
            <button
              onClick={() => setActiveTab('aggregated')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'aggregated'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Vue Agrégée
            </button>
          </div>
        </div>

        {/* Contenu selon l'onglet actif */}
        {activeTab === 'individual' ? (
          <>
            {/* Sélecteur de produit */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sélectionner un produit
              </label>
              <ProductSelector
                selectedProduct={selectedProduct}
                onProductChange={handleProductChange}
                products={mockProducts}
                loading={loading}
              />
            </div>

            {/* Métriques */}
            <MetricsCards 
              predictions={{
                next30Days: selectedProduct ? 1247 : 0,
                next60Days: selectedProduct ? 2384 : 0,
                next90Days: selectedProduct ? 3521 : 0,
                modelAccuracy: selectedProduct ? 92 : 0
              }}
              selectedProduct={selectedProduct}
            />

            {/* Graphique principal */}
            <PredictionChart
              data={predictionData}
              selectedProduct={selectedProduct}
              loading={loading}
            />

            {/* Message d'aide si aucun produit sélectionné */}
            {!selectedProduct && (
              <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-6 text-center">
                <Package size={48} className="mx-auto mb-4 text-blue-300" />
                <h3 className="text-lg font-medium text-blue-900 mb-2">
                  Sélectionnez un produit pour voir les prédictions
                </h3>
                <p className="text-blue-700">
                  Utilisez le sélecteur ci-dessus pour choisir un produit et visualiser ses prédictions de demande.
                </p>
              </div>
            )}
          </>
        ) : (
          <AggregatedPredictions data={mockAggregatedData} />
        )}
      </div>
    </div>
  );
};

export default PredictionModule;

# File: ./src\components\module1\CreateEntreprise.tsx
import React, { useState } from 'react';
import { Building2, Plus, Edit, Trash2, LogIn, Mail, Phone, MapPin, Save, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

  const EnterpriseCard = ({ enterprise, onEdit, onDelete }) => (
    <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className="bg-blue-100 p-2 rounded-lg">
            <Building2 className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{enterprise.name}</h3>
            <span className="text-sm text-gray-500">{enterprise.sector}</span>
          </div>
        </div>
        <div className="flex space-x-2">
          {enterprise.isOwner && (
            <>
              <button
                onClick={() => onEdit(enterprise)}
                className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
              >
                <Edit className="w-4 h-4" />
              </button>
              <button
                onClick={() => onDelete(enterprise.id)}
                className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </>
          )}
        </div>
      </div>
      
      <div className="space-y-2 text-sm text-gray-600">
        <div className="flex items-center space-x-2">
          <MapPin className="w-4 h-4" />
          <span>{enterprise.address}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Phone className="w-4 h-4" />
          <span>{enterprise.phone}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Mail className="w-4 h-4" />
          <span>{enterprise.email}</span>
        </div>
        <div className="flex items-center justify-between mt-4">
          <span className={`px-2 py-1 rounded-full text-xs ${
            enterprise.isOwner 
              ? 'bg-blue-100 text-blue-800' 
              : 'bg-gray-100 text-gray-800'
          }`}>
            {enterprise.isOwner ? 'Propriétaire' : 'Membre'}
          </span>
        </div>
      </div>
    </div>
  );
  
  const EnterpriseForm = ({ formData, onChange, onSubmit, onCancel, title }) => {
    
    const handleChange = (e) => {
      const { name, value } = e.target;
      onChange((prev) => ({
        ...prev,
        [name]: value
      }));
    };
    return(
        <div className="bg-white rounded-lg shadow-lg p-6 max-w-2xl mx-auto">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">{title}</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Nom de l'entreprise *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Distribution Centrale SARL"
                name="name"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Secteur d'activité *
              </label>
              <select
                value={formData.sector}
                onChange={handleChange}
                name="sector"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Distribution">Distribution</option>
                <option value="Retail">Retail</option>
                <option value="E-commerce">E-commerce</option>
                <option value="Manufacturing">Manufacturing</option>
                <option value="Pharmacie">Pharmacie</option>
                <option value="Autre">Autre</option>
              </select>
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Taille de l'entreprise *
              </label>
              <input
                type="text"
                value={formData.size}
                onChange={handleChange}
                name="size"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: 250-500 employés"
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Numéro de SIRET *
              </label>
              <input
                type="text"
                value={formData.registrationNumber}
                onChange={handleChange}
                name="registrationNumber"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: 123 456 789 RCS Paris"
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Adresse *
              </label>
              <input
                type="text"
                value={formData.address}
                onChange={handleChange}
                name="address"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Avenue Kennedy, Douala, Cameroun"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Code postal *
              </label>
              <input
                type="tel"
                value={formData.postalCode}
                onChange={handleChange}
                name="postalCode"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="75008"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Pays *
              </label>
              <input
                type="tel"
                value={formData.country}
                onChange={handleChange}
                name="country"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="France"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ville *
              </label>
              <input
                type="text"
                value={formData.city}
                onChange={handleChange}
                name="city"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Paris"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Téléphone *
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={handleChange}
                name="phone"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="+237 233 42 15 78"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email *
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={handleChange}
                name="email"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="contact@entreprise.cm"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Site web *
              </label>
              <input
                type="text"
                value={formData.website}
                onChange={handleChange}
                name="website"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: www.techcorp-solutions.fr"
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Numéro de TVA *
              </label>
              <input
                type="text"
                value={formData.taxId}
                onChange={handleChange}
                name="taxId"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: FR12345678901"
              />
            </div>
          </div>
          
          <div className="flex justify-end space-x-4 mt-6">
            <button
              onClick={onCancel}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
            >
              <X className="w-4 h-4 inline mr-2" />
              Annuler
            </button>
            <button
              onClick={onSubmit}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              <Save className="w-4 h-4 inline mr-2" />
              Enregistrer
            </button>
          </div>
        </div>
    );
  };

const CreateEntreprise = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [enterprises, setEnterprises] = useState([
    {
      id: 1,
      name: "Distribution Centrale SARL",
      sector: 'Technologie',
      size: '250-500 employés',
      address: '123 Avenue des Champs-Élysées',
      city: 'Paris',
      postalCode: '75008',
      country: 'France',
      phone: '+33 1 23 45 67 89',
      email: 'contact@techcorp-solutions.fr',
      website: 'www.techcorp-solutions.fr',
      taxId: 'FR12345678901',
      registrationNumber: '123 456 789 RCS Paris',
      isOwner: true
    },
    {
      id: 2,
      name: "Pharma Plus",
      sector: "Pharmacie",
      size: '250-500 employés',
      address: "Quartier Bastos, Yaoundé, Cameroun",
      city: 'Paris',
      postalCode: '75008',
      country: 'France',
      phone: "+237 222 20 45 67",
      email: "info@pharmaplus.cm",
      website: 'www.techcorp-solutions.fr',
      taxId: 'FR12345678901',
      registrationNumber: '123 456 789 RCS Paris',
      isOwner: false
    }
  ]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    sector: 'Distribution',
    size: '',
    address: '',
    city: '',
    postalCode: '',
    country: '',
    phone: '',
    email: '',
    website: '',
    taxId: '',
    registrationNumber: ''
  });

  // Simulation de connexion
  const navigate = useNavigate();
  const handleLogin = () => {
    setIsAuthenticated(true);
    navigate("/dashboard");
  };

  const handleCreateEnterprise = () => {
    if (formData.name && formData.address && formData.phone && formData.email) {
      const newEnterprise = {
        id: enterprises.length + 1,
        ...formData,
        isOwner: true
      };
      setEnterprises([...enterprises, newEnterprise]);
      setFormData({
        name: '',
        sector: 'Distribution',
        size: '',
        address: '',
        city: '',
        postalCode: '',
        country: '',
        phone: '',
        email: '',
        website: '',
        taxId: '',
        registrationNumber: ''
      });
      setShowCreateForm(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              InventoryAI Enterprise
            </h1>
            <p className="text-xl text-gray-600">
              Plateforme intelligente de gestion de stock pour les PME africaines
            </p>
          </div>

          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">
                  Créer une nouvelle entreprise
                </h2>
                <button
                  onClick={handleLogin}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                >
                  <LogIn className="w-4 h-4" />
                  <span>Se connecter</span>
                </button>
              </div>

              {!showCreateForm ? (
                <div className="text-center py-8">
                  <Building2 className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600 mb-6">
                    Créez votre première entreprise pour commencer à utiliser InventoryAI
                  </p>
                  <button
                    onClick={() => setShowCreateForm(true)}
                    className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors mx-auto"
                  >
                    <Plus className="w-5 h-5" />
                    <span>Créer une entreprise</span>
                  </button>
                </div>
              ) : (
                <EnterpriseForm
                  onSubmit={handleCreateEnterprise}
                  formData={formData}
                  onChange={setFormData}
                  onCancel={() => setShowCreateForm(false)}
                  title="Nouvelle entreprise"
                />
              )}
            </div>

            {enterprises.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg p-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">
                  Entreprises disponibles
                </h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {enterprises.map((enterprise) => (
                    <EnterpriseCard
                      key={enterprise.id}
                      enterprise={enterprise}
                      onEdit={() => {}}
                      onDelete={() => {}}
                    />
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
};

export default CreateEntreprise;

# File: ./src\components\module1\EnterpriseAccountManagement.tsx
import React, { useState } from 'react';
import { Building2, Edit, Download, Save, X, Shield, Users, CreditCard, Settings, AlertCircle, CheckCircle, MapPin, Phone, Mail, Globe, User } from 'lucide-react';

const EnterpriseAccountManagement = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('billing');
  
  const [companyInfo, setCompanyInfo] = useState({
    name: 'TechCorp Solutions',
    industry: 'Technologie',
    size: '250-500 employés',
    address: '123 Avenue des Champs-Élysées',
    city: 'Paris',
    postalCode: '75008',
    country: 'France',
    phone: '+33 1 23 45 67 89',
    email: 'contact@techcorp-solutions.fr',
    website: 'www.techcorp-solutions.fr',
    taxId: 'FR12345678901',
    registrationNumber: '123 456 789 RCS Paris'
  });

  const [billingInfo, setBillingInfo] = useState({
    plan: 'Enterprise Premium',
    users: 45,
    maxUsers: 100,
    monthlyFee: 2499,
    nextBilling: '2025-07-15',
    paymentMethod: '**** **** **** 1234',
    billingAddress: '123 Avenue des Champs-Élysées, 75008 Paris, France'
  });

  const [subscription, setSubscription] = useState({
    status: 'active',
    startDate: '2024-01-15',
    renewalDate: '2025-07-15',
    autoRenewal: true
  });

  const handleSave = () => {
    setIsEditing(false);
    // Simulation de sauvegarde
    setTimeout(() => {
      alert('Informations mises à jour avec succès !');
    }, 500);
  };

  const handleCancel = () => {
    setIsEditing(false);
    // Réinitialiser les modifications si nécessaire
  };

  const InputField = ({ label, value, onChange, name, type = "text", disabled = false }) => (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        disabled={disabled || !isEditing}
        className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
          disabled || !isEditing ? 'bg-gray-50 cursor-not-allowed' : 'bg-white'
        }`}
      />
    </div>
  );

  const TabButton = ({ id, label, icon: Icon, active, onClick }) => (
    <button
      onClick={() => onClick(id)}
      className={`flex items-center px-4 py-2 rounded-lg font-medium transition-colors ${
        active
          ? 'bg-blue-100 text-blue-700 border border-blue-200'
          : 'text-gray-600 hover:bg-gray-100'
      }`}
    >
      <Icon className="w-4 h-4 mr-2" />
      {label}
    </button>
  );

  const StatusBadge = ({ status }) => {
    const statusConfig = {
      active: { label: 'Actif', color: 'bg-green-100 text-green-800' },
      inactive: { label: 'Inactif', color: 'bg-red-100 text-red-800' },
      suspended: { label: 'Suspendu', color: 'bg-yellow-100 text-yellow-800' }
    };

    const config = statusConfig[status] || statusConfig.inactive;
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  return (
    <div className="">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <Shield className="w-6 h-6 text-red-600 mr-3" />
              <div>
                <h1 className="text-xl font-semibold text-gray-900">Administration</h1>
                <p className="text-sm text-gray-500">Gestion de Compte Entreprise</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="text-sm text-gray-500">
                Accès Admin requis
              </div>
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <Shield className="w-4 h-4 text-red-600" />
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Company Header */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center mr-4">
                <Building2 className="w-8 h-8 text-blue-600" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900">{companyInfo.name}</h2>
                <p className="text-sm text-gray-500">{companyInfo.industry} • {companyInfo.size}</p>
                <div className="flex items-center mt-2">
                  <StatusBadge status={subscription.status} />
                  <span className="ml-3 text-sm text-gray-500">
                    Plan: <span className="font-medium">{billingInfo.plan}</span>
                  </span>
                </div>
              </div>
            </div>
            <div className="flex space-x-3">
              {!isEditing ? (
                <button
                  onClick={() => setIsEditing(true)}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Edit className="w-4 h-4 mr-2" />
                  Modifier
                </button>
              ) : (
                <>
                  <button
                    onClick={handleCancel}
                    className="flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
                  >
                    <X className="w-4 h-4 mr-2" />
                    Annuler
                  </button>
                  <button
                    onClick={handleSave}
                    className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Sauvegarder
                  </button>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white rounded-lg shadow-sm border mb-6">
          <div className="p-4 border-b">
            <div className="flex space-x-2">
              <TabButton
                id="billing"
                label="Facturation"
                icon={CreditCard}
                active={activeTab === 'billing'}
                onClick={setActiveTab}
              />
              <TabButton
                id="users"
                label="Utilisateurs"
                icon={Users}
                active={activeTab === 'users'}
                onClick={setActiveTab}
              />
              <TabButton
                id="settings"
                label="Paramètres"
                icon={Settings}
                active={activeTab === 'settings'}
                onClick={setActiveTab}
              />
            </div>
          </div>

          <div className="p-6">

            {/* Billing Tab */}
            {activeTab === 'billing' && (
              <div className="space-y-8">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Abonnement Actuel</h3>
                  <div className="bg-blue-50 rounded-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h4 className="text-xl font-bold text-blue-900">{billingInfo.plan}</h4>
                        <p className="text-blue-700">€{billingInfo.monthlyFee}/mois</p>
                      </div>
                      <StatusBadge status={subscription.status} />
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <p className="text-gray-600">Utilisateurs</p>
                        <p className="font-medium">{billingInfo.users}/{billingInfo.maxUsers}</p>
                      </div>
                      <div>
                        <p className="text-gray-600">Prochaine facturation</p>
                        <p className="font-medium">{new Date(billingInfo.nextBilling).toLocaleDateString('fr-FR')}</p>
                      </div>
                      <div>
                        <p className="text-gray-600">Renouvellement auto</p>
                        <p className="font-medium">{subscription.autoRenewal ? 'Activé' : 'Désactivé'}</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Méthode de Paiement</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <CreditCard className="w-5 h-5 text-gray-600 mr-3" />
                        <div>
                          <p className="font-medium">{billingInfo.paymentMethod}</p>
                          <p className="text-sm text-gray-600">Expire 12/2026</p>
                        </div>
                      </div>
                      <button className="text-blue-600 hover:text-blue-800 font-medium">
                        Modifier
                      </button>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Adresse de Facturation</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start">
                        <MapPin className="w-5 h-5 text-gray-600 mr-3 mt-1" />
                        <div>
                          <p className="font-medium">{companyInfo.name}</p>
                          <p className="text-sm text-gray-600">{billingInfo.billingAddress}</p>
                        </div>
                      </div>
                      <button className="text-blue-600 hover:text-blue-800 font-medium">
                        Modifier
                      </button>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Historique des Factures</h3>
                  <div className="bg-white border rounded-lg">
                    <div className="p-4 border-b">
                      <div className="grid grid-cols-4 gap-4 text-sm font-medium text-gray-600">
                        <div>Date</div>
                        <div>Montant</div>
                        <div>Statut</div>
                        <div>Actions</div>
                      </div>
                    </div>
                    {[
                      { date: '2025-06-15', amount: '€2,499', status: 'Payée' },
                      { date: '2025-05-15', amount: '€2,499', status: 'Payée' },
                      { date: '2025-04-15', amount: '€2,499', status: 'Payée' }
                    ].map((invoice, index) => (
                      <div key={index} className="p-4 border-b last:border-b-0">
                        <div className="grid grid-cols-4 gap-4 text-sm">
                          <div>{invoice.date}</div>
                          <div className="font-medium">{invoice.amount}</div>
                          <div>
                            <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                              {invoice.status}
                            </span>
                          </div>
                          <div>
                            <button className="text-blue-600 hover:text-blue-800">
                              <Download className="ml-2 w-7 h-7" />
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Users Tab */}
            {activeTab === 'users' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-gray-900">Statistiques des Utilisateurs</h3>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div className="bg-blue-50 rounded-lg p-4">
                    <div className="flex items-center">
                      <Users className="w-8 h-8 text-blue-600 mr-3" />
                      <div>
                        <p className="text-2xl font-bold text-blue-900">{billingInfo.users}</p>
                        <p className="text-sm text-blue-700">Utilisateurs actifs</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-green-50 rounded-lg p-4">
                    <div className="flex items-center">
                      <CheckCircle className="w-8 h-8 text-green-600 mr-3" />
                      <div>
                        <p className="text-2xl font-bold text-green-900">42</p>
                        <p className="text-sm text-green-700">Connectés ce mois</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-yellow-50 rounded-lg p-4">
                    <div className="flex items-center">
                      <AlertCircle className="w-8 h-8 text-yellow-600 mr-3" />
                      <div>
                        <p className="text-2xl font-bold text-yellow-900">3</p>
                        <p className="text-sm text-yellow-700">Invitations en attente</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center">
                      <User className="w-8 h-8 text-gray-600 mr-3" />
                      <div>
                        <p className="text-2xl font-bold text-gray-900">{billingInfo.maxUsers - billingInfo.users}</p>
                        <p className="text-sm text-gray-700">Places disponibles</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="bg-white border rounded-lg p-6">
                  <h4 className="font-semibold text-gray-900 mb-4">Répartition par Rôle</h4>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Shield className="w-4 h-4 text-red-600 mr-2" />
                        <span>Administrateurs</span>
                      </div>
                      <span className="font-medium">5</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Users className="w-4 h-4 text-blue-600 mr-2" />
                        <span>Utilisateurs Standard</span>
                      </div>
                      <span className="font-medium">40</span>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-50 rounded-lg p-4">
                  <div className="flex items-start">
                    <AlertCircle className="w-5 h-5 text-blue-600 mr-3 mt-1" />
                    <div>
                      <p className="font-medium text-blue-900">Gestion des Utilisateurs</p>
                      <p className="text-sm text-blue-700 mt-1">
                        Pour gérer les utilisateurs individuels, leurs rôles et permissions, 
                        rendez-vous dans le module "Gestion des Utilisateurs et des Rôles".
                      </p>
                      <button className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        <a href="/user-management">Accéder à la Gestion des Utilisateurs</a>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Settings Tab */}
            {activeTab === 'settings' && (
              <div className="space-y-8">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Paramètres de Sécurité</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Authentification à deux facteurs (2FA)</p>
                        <p className="text-sm text-gray-600">Obligatoire pour tous les administrateurs</p>
                      </div>
                      <div className="flex items-center">
                        <span className="text-green-600 mr-2">Activé</span>
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      </div>
                    </div>
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Expiration des sessions</p>
                        <p className="text-sm text-gray-600">Déconnexion automatique après inactivité</p>
                      </div>
                      <select className="px-3 py-1 border rounded-lg">
                        <option>8 heures</option>
                        <option>4 heures</option>
                        <option>2 heures</option>
                        <option>1 heure</option>
                      </select>
                    </div>
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Restriction d'accès par IP</p>
                        <p className="text-sm text-gray-600">Limiter l'accès à certaines adresses IP</p>
                      </div>
                      <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Configurer
                      </button>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Préférences Système</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Fuseau horaire</p>
                        <p className="text-sm text-gray-600">Utilisé pour tous les rapports et notifications</p>
                      </div>
                      <select className="px-3 py-1 border rounded-lg">
                        <option>Europe/Paris (GMT+1)</option>
                        <option>Europe/London (GMT+0)</option>
                        <option>America/New_York (GMT-5)</option>
                      </select>
                    </div>
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Langue par défaut</p>
                        <p className="text-sm text-gray-600">Langue principale de l'interface</p>
                      </div>
                      <select className="px-3 py-1 border rounded-lg">
                        <option>Français</option>
                        <option>English</option>
                        <option>Español</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Notifications</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Alertes de sécurité</p>
                        <p className="text-sm text-gray-600">Notifications en cas d'activité suspecte</p>
                      </div>
                      <input type="checkbox" className="w-4 h-4" defaultChecked />
                    </div>
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Rapports automatiques</p>
                        <p className="text-sm text-gray-600">Envoi hebdomadaire des rapports d'activité</p>
                      </div>
                      <input type="checkbox" className="w-4 h-4" defaultChecked />
                    </div>
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium">Mises à jour système</p>
                        <p className="text-sm text-gray-600">Notifications des nouvelles fonctionnalités</p>
                      </div>
                      <input type="checkbox" className="w-4 h-4" />
                    </div>
                  </div>
                </div>

                <div className="bg-red-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-red-800 mb-4">Zone de Danger</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-medium text-red-800">Suspendre le compte</p>
                        <p className="text-sm text-red-600">Désactiver temporairement tous les accès</p>
                      </div>
                      <button className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700">
                        Suspendre
                      </button>
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-medium text-red-800">Supprimer le compte</p>
                        <p className="text-sm text-red-600">Action irréversible - toutes les données seront perdues</p>
                      </div>
                      <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                        Supprimer
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnterpriseAccountManagement;

# File: ./src\components\module1\ImportSyncModule.tsx
import React, { useState, useEffect } from 'react';
import { Upload, Download, RefreshCw as Sync, Database, CheckCircle, AlertCircle, XCircle, Clock, Play, Pause, Settings, FileText, BarChart3, RefreshCw, Calendar, Filter, Search, Eye, Activity } from 'lucide-react';

const ImportSyncModule = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [syncJobs, setSyncJobs] = useState([
    {
      id: 1,
      name: 'Shopify - Ventes Quotidiennes',
      source: 'Shopify',
      type: 'sales',
      status: 'running',
      lastSync: '2025-06-23 14:30:00',
      nextSync: '2025-06-23 15:00:00',
      progress: 75,
      recordsProcessed: 1247,
      totalRecords: 1663,
      errors: 0,
      frequency: 'every_30min'
    },
    {
      id: 2,
      name: 'WooCommerce - Stock Temps Réel',
      source: 'WooCommerce',
      type: 'inventory',
      status: 'completed',
      lastSync: '2025-06-23 14:45:00',
      nextSync: '2025-06-23 15:15:00',
      progress: 100,
      recordsProcessed: 892,
      totalRecords: 892,
      errors: 0,
      frequency: 'every_30min'
    },
    {
      id: 3,
      name: 'Magento - Catalogue Produits',
      source: 'Magento',
      type: 'catalog',
      status: 'error',
      lastSync: '2025-06-23 13:30:00',
      nextSync: '2025-06-23 14:30:00',
      progress: 45,
      recordsProcessed: 234,
      totalRecords: 520,
      errors: 12,
      frequency: 'hourly'
    },
    {
      id: 4,
      name: 'ERP SAP - Mouvements Stock',
      source: 'SAP ERP',
      type: 'movements',
      status: 'scheduled',
      lastSync: '2025-06-23 12:00:00',
      nextSync: '2025-06-23 16:00:00',
      progress: 0,
      recordsProcessed: 0,
      totalRecords: 0,
      errors: 0,
      frequency: 'every_4h'
    }
  ]);

  const [importHistory, setImportHistory] = useState([
    {
      id: 1,
      fileName: 'ventes_juin_2025.csv',
      source: 'Upload Manuel',
      type: 'sales',
      status: 'completed',
      timestamp: '2025-06-23 10:15:00',
      recordsProcessed: 2847,
      errors: 0,
      fileSize: '2.4 MB'
    },
    {
      id: 2,
      fileName: 'stock_warehouse_A.xlsx',
      source: 'Upload Manuel',
      type: 'inventory',
      status: 'processing',
      timestamp: '2025-06-23 14:20:00',
      recordsProcessed: 1205,
      errors: 3,
      fileSize: '5.7 MB'
    },
    {
      id: 3,
      fileName: 'catalogue_produits.json',
      source: 'API REST',
      type: 'catalog',
      status: 'failed',
      timestamp: '2025-06-23 13:45:00',
      recordsProcessed: 89,
      errors: 45,
      fileSize: '1.2 MB'
    }
  ]);

  const [showJobModal, setShowJobModal] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'text-green-600 bg-green-100';
      case 'running': return 'text-blue-600 bg-blue-100';
      case 'error': case 'failed': return 'text-red-600 bg-red-100';
      case 'scheduled': return 'text-yellow-600 bg-yellow-100';
      case 'processing': return 'text-purple-600 bg-purple-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-4 h-4" />;
      case 'running': return <Activity className="w-4 h-4" />;
      case 'error': case 'failed': return <XCircle className="w-4 h-4" />;
      case 'scheduled': return <Clock className="w-4 h-4" />;
      case 'processing': return <RefreshCw className="w-4 h-4 animate-spin" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getSourceIcon = (source) => {
    switch (source) {
      case 'Shopify': return '🛍️';
      case 'WooCommerce': return '🛒';
      case 'Magento': return '🏪';
      case 'SAP ERP': return '🏢';
      case 'Upload Manuel': return '📁';
      case 'API REST': return '🔗';
      default: return '📊';
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setIsUploading(true);
      setUploadProgress(0);
      
      // Simulation d'upload
      const interval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 100) {
            clearInterval(interval);
            setIsUploading(false);
            // Ajouter à l'historique
            const newImport = {
              id: importHistory.length + 1,
              fileName: file.name,
              source: 'Upload Manuel',
              type: 'sales',
              status: 'processing',
              timestamp: new Date().toISOString().replace('T', ' ').slice(0, 19),
              recordsProcessed: 0,
              errors: 0,
              fileSize: `${(file.size / 1024 / 1024).toFixed(1)} MB`
            };
            setImportHistory(prev => [newImport, ...prev]);
            return 0;
          }
          return prev + 10;
        });
      }, 200);
    }
  };

  const startSync = (jobId) => {
    setSyncJobs(prev => prev.map(job => 
      job.id === jobId ? { ...job, status: 'running', progress: 0 } : job
    ));
  };

  const pauseSync = (jobId) => {
    setSyncJobs(prev => prev.map(job => 
      job.id === jobId ? { ...job, status: 'scheduled' } : job
    ));
  };

  const DashboardView = () => (
    <div className="space-y-6">
      {/* Statistiques générales */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm font-medium">Sources Actives</p>
              <p className="text-3xl font-bold">12</p>
            </div>
            <Database className="w-8 h-8 text-blue-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-green-500 to-green-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm font-medium">Syncs Réussies (24h)</p>
              <p className="text-3xl font-bold">47</p>
            </div>
            <CheckCircle className="w-8 h-8 text-green-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm font-medium">Enregistrements/Jour</p>
              <p className="text-3xl font-bold">28.5K</p>
            </div>
            <BarChart3 className="w-8 h-8 text-purple-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-red-500 to-red-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-red-100 text-sm font-medium">Erreurs Actives</p>
              <p className="text-3xl font-bold">3</p>
            </div>
            <AlertCircle className="w-8 h-8 text-red-200" />
          </div>
        </div>
      </div>

      {/* Statut des synchronisations */}
      <div className="bg-white rounded-xl shadow-lg p-5">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-semibold text-gray-900">Synchronisations en Cours</h3>
          <button className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            <RefreshCw className="w-4 h-4" />
            Actualiser Tout
          </button>
        </div>
        
        <div className="space-y-4">
          {syncJobs.filter(job => job.status === 'running' || job.status === 'error').map(job => (
            <div key={job.id} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{getSourceIcon(job.source)}</span>
                  <div>
                    <h4 className="font-medium text-gray-900">{job.name}</h4>
                    <p className="text-sm text-gray-500">{job.source} • {job.type}</p>
                  </div>
                </div>
                <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(job.status)}`}>
                  {getStatusIcon(job.status)}
                  {job.status === 'running' ? 'En cours' : job.status === 'error' ? 'Erreur' : 'Terminé'}
                </div>
              </div>
              
              {job.status === 'running' && (
                <div className="mt-3">
                  <div className="flex justify-between text-sm text-gray-600 mb-1">
                    <span>{job.recordsProcessed} / {job.totalRecords} enregistrements</span>
                    <span>{job.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${job.progress}%` }}
                    ></div>
                  </div>
                </div>
              )}
              
              {job.status === 'error' && (
                <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-700">{job.errors} erreurs détectées</p>
                  <button className="text-sm text-red-600 hover:text-red-800 mt-1">Voir les détails →</button>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const SyncJobsView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold text-gray-900">Tâches de Synchronisation</h3>
        <button 
          onClick={() => setShowJobModal(true)}
          className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Sync className="w-4 h-4" />
          Nouvelle Tâche
        </button>
      </div>
      
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tâche</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dernière Sync</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fréquence</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {syncJobs.map(job => (
                <tr key={job.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getSourceIcon(job.source)}</span>
                      <div>
                        <div className="text-sm font-medium text-gray-900">{job.name}</div>
                        {job.status === 'running' && (
                          <div className="text-xs text-gray-500">
                            {job.recordsProcessed} / {job.totalRecords} enregistrements
                          </div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{job.source}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                      {job.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(job.status)}`}>
                      {getStatusIcon(job.status)}
                      {job.status === 'running' ? 'En cours' : 
                       job.status === 'completed' ? 'Terminé' :
                       job.status === 'error' ? 'Erreur' : 
                       job.status === 'scheduled' ? 'Programmé' : job.status}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(job.lastSync).toLocaleString('fr-FR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {job.frequency === 'every_30min' ? 'Toutes les 30min' :
                     job.frequency === 'hourly' ? 'Toutes les heures' :
                     job.frequency === 'every_4h' ? 'Toutes les 4h' : job.frequency}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center gap-2">
                      {job.status === 'scheduled' && (
                        <button 
                          onClick={() => startSync(job.id)}
                          className="text-green-600 hover:text-green-900"
                          title="Démarrer"
                        >
                          <Play className="w-4 h-4" />
                        </button>
                      )}
                      {job.status === 'running' && (
                        <button 
                          onClick={() => pauseSync(job.id)}
                          className="text-yellow-600 hover:text-yellow-900"
                          title="Pause"
                        >
                          <Pause className="w-4 h-4" />
                        </button>
                      )}
                      <button 
                        onClick={() => setSelectedJob(job)}
                        className="text-blue-600 hover:text-blue-900"
                        title="Voir détails"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                      <button className="text-gray-600 hover:text-gray-900" title="Paramètres">
                        <Settings className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const ImportView = () => (
    <div className="space-y-6">
      {/* Zone d'upload */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-4">Import de Fichiers</h3>
        
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors">
          <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h4 className="text-lg font-medium text-gray-900 mb-2">Glissez vos fichiers ici</h4>
          <p className="text-gray-600 mb-4">ou cliquez pour sélectionner</p>
          <input
            type="file"
            onChange={handleFileUpload}
            className="hidden"
            id="file-upload"
            accept=".csv,.xlsx,.xls,.json"
          />
          <label
            htmlFor="file-upload"
            className="inline-flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer"
          >
            <FileText className="w-4 h-4" />
            Sélectionner un fichier
          </label>
          <p className="text-sm text-gray-500 mt-2">
            Formats supportés: CSV, Excel (.xlsx, .xls), JSON
          </p>
        </div>

        {isUploading && (
          <div className="mt-4">
            <div className="flex justify-between text-sm text-gray-600 mb-1">
              <span>Upload en cours...</span>
              <span>{uploadProgress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              ></div>
            </div>
          </div>
        )}
      </div>

      {/* Historique des imports */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-semibold text-gray-900">Historique des Imports</h3>
          <div className="flex items-center gap-2">
            <button className="flex items-center gap-2 text-gray-600 hover:text-gray-900 px-3 py-2 rounded-lg border border-gray-300">
              <Filter className="w-4 h-4" />
              Filtrer
            </button>
            <button className="flex items-center gap-2 text-gray-600 hover:text-gray-900 px-3 py-2 rounded-lg border border-gray-300">
              <Download className="w-4 h-4" />
              Exporter
            </button>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fichier</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Enregistrements</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {importHistory.map(item => (
                <tr key={item.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{getSourceIcon(item.source)}</span>
                      <div>
                        <div className="text-sm font-medium text-gray-900">{item.fileName}</div>
                        <div className="text-xs text-gray-500">{item.fileSize}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.source}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                      {item.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(item.status)}`}>
                      {getStatusIcon(item.status)}
                      {item.status === 'completed' ? 'Terminé' : 
                       item.status === 'processing' ? 'En cours' :
                       item.status === 'failed' ? 'Échec' : item.status}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(item.timestamp).toLocaleString('fr-FR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <div>
                      <div>{item.recordsProcessed.toLocaleString()} traités</div>
                      {item.errors > 0 && (
                        <div className="text-red-600 text-xs">{item.errors} erreurs</div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center gap-2">
                      <button className="text-blue-600 hover:text-blue-900">
                        <Eye className="w-4 h-4" />
                      </button>
                      <button className="text-green-600 hover:text-green-900">
                        <Download className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  return (
    <div className="">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-4">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                  <Sync className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">Import & Synchronisation</h1>
                  <p className="text-sm text-gray-600">Gestion des données de ventes et de stock</p>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <button className="flex items-center gap-2 text-gray-600 hover:text-gray-900 px-3 py-2 rounded-lg border border-gray-300">
                <Calendar className="w-4 h-4" />
                Planifier
              </button>
              <button className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                <Settings className="w-4 h-4" />
                Paramètres
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'dashboard', label: 'Tableau de Bord', icon: BarChart3 },
              { id: 'sync', label: 'Synchronisations', icon: Sync },
              { id: 'import', label: 'Import Fichiers', icon: Upload },
              { id: 'mapping', label: 'Mapping Données', icon: Database }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Contenu principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'dashboard' && <DashboardView />}
        {activeTab === 'sync' && <SyncJobsView />}
        {activeTab === 'import' && <ImportView />}
        {activeTab === 'mapping' && (
          <div className="bg-white rounded-xl shadow-lg p-8 text-center">
            <Database className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Mapping des Données</h3>
            <p className="text-gray-600">Configuration du mapping des champs de données</p>
          </div>
        )}
      </div>

      {/* Modal détails tâche */}
      {selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <span className="text-3xl">{getSourceIcon(selectedJob.source)}</span>
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900">{selectedJob.name}</h3>
                    <p className="text-gray-600">{selectedJob.source}</p>
                  </div>
                </div>
                <button 
                  onClick={() => setSelectedJob(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XCircle className="w-6 h-6" />
                </button>
              </div>

              <div className="space-y-6">
                {/* Statut et progression */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Statut Actuel</h4>
                  <div className="flex items-center justify-between">
                    <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(selectedJob.status)}`}>
                      {getStatusIcon(selectedJob.status)}
                      {selectedJob.status === 'running' ? 'En cours d\'exécution' : 
                       selectedJob.status === 'completed' ? 'Terminé avec succès' :
                       selectedJob.status === 'error' ? 'Erreur détectée' : 
                       selectedJob.status === 'scheduled' ? 'Programmé' : selectedJob.status}
                    </div>
                    {selectedJob.status === 'running' && (
                      <span className="text-sm text-gray-600">{selectedJob.progress}%</span>
                    )}
                  </div>
                  
                  {selectedJob.status === 'running' && (
                    <div className="mt-3">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${selectedJob.progress}%` }}
                        ></div>
                      </div>
                      <div className="flex justify-between text-sm text-gray-600 mt-1">
                        <span>{selectedJob.recordsProcessed} / {selectedJob.totalRecords} enregistrements</span>
                        <span>Temps estimé: 5 min</span>
                      </div>
                    </div>
                  )}
                </div>

                {/* Informations de synchronisation */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <Clock className="w-4 h-4 text-blue-600" />
                      <h5 className="font-medium text-blue-900">Dernière Synchronisation</h5>
                    </div>
                    <p className="text-blue-700">{new Date(selectedJob.lastSync).toLocaleString('fr-FR')}</p>
                  </div>
                  
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <RefreshCw className="w-4 h-4 text-green-600" />
                      <h5 className="font-medium text-green-900">Prochaine Synchronisation</h5>
                    </div>
                    <p className="text-green-700">{new Date(selectedJob.nextSync).toLocaleString('fr-FR')}</p>
                  </div>
                </div>

                {/* Statistiques détaillées */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Statistiques</h4>
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <p className="text-2xl font-bold text-blue-600">{selectedJob.recordsProcessed.toLocaleString()}</p>
                      <p className="text-sm text-gray-600">Enregistrements traités</p>
                    </div>
                    <div>
                      <p className="text-2xl font-bold text-green-600">{(selectedJob.recordsProcessed - selectedJob.errors).toLocaleString()}</p>
                      <p className="text-sm text-gray-600">Succès</p>
                    </div>
                    <div>
                      <p className="text-2xl font-bold text-red-600">{selectedJob.errors}</p>
                      <p className="text-sm text-gray-600">Erreurs</p>
                    </div>
                  </div>
                </div>

                {/* Configuration */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-3">Configuration</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Type de données:</span>
                      <span className="font-medium">{selectedJob.type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Fréquence:</span>
                      <span className="font-medium">
                        {selectedJob.frequency === 'every_30min' ? 'Toutes les 30 minutes' :
                         selectedJob.frequency === 'hourly' ? 'Toutes les heures' :
                         selectedJob.frequency === 'every_4h' ? 'Toutes les 4 heures' : selectedJob.frequency}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Auto-restart:</span>
                      <span className="font-medium text-green-600">Activé</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Timeout:</span>
                      <span className="font-medium">30 minutes</span>
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex justify-end gap-3 pt-4 border-t">
                  <button 
                    onClick={() => setSelectedJob(null)}
                    className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Fermer
                  </button>
                  <button className="px-4 py-2 text-blue-700 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors">
                    Modifier
                  </button>
                  {selectedJob.status === 'scheduled' && (
                    <button 
                      onClick={() => {
                        startSync(selectedJob.id);
                        setSelectedJob(null);
                      }}
                      className="px-4 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors"
                    >
                      Démarrer
                    </button>
                  )}
                  {selectedJob.status === 'running' && (
                    <button 
                      onClick={() => {
                        pauseSync(selectedJob.id);
                        setSelectedJob(null);
                      }}
                      className="px-4 py-2 text-white bg-yellow-600 rounded-lg hover:bg-yellow-700 transition-colors"
                    >
                      Pause
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal nouvelle tâche */}
      {showJobModal && (
        <div className="fixed inset-0 bg-black/25 bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-semibold text-gray-900">Nouvelle Tâche de Synchronisation</h3>
                <button 
                  onClick={() => setShowJobModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XCircle className="w-6 h-6" />
                </button>
              </div>

              <form className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nom de la tâche</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Ex: Import ventes quotidiennes"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Source de données</label>
                  <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Sélectionner une source</option>
                    <option value="shopify">Shopify</option>
                    <option value="woocommerce">WooCommerce</option>
                    <option value="magento">Magento</option>
                    <option value="sap">SAP ERP</option>
                    <option value="api">API REST Personnalisée</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Type de données</label>
                  <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="sales">Données de ventes</option>
                    <option value="inventory">Stock et inventaire</option>
                    <option value="catalog">Catalogue produits</option>
                    <option value="movements">Mouvements de stock</option>
                    <option value="customers">Données clients</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Fréquence de synchronisation</label>
                  <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="every_15min">Toutes les 15 minutes</option>
                    <option value="every_30min">Toutes les 30 minutes</option>
                    <option value="hourly">Toutes les heures</option>
                    <option value="every_4h">Toutes les 4 heures</option>
                    <option value="daily">Quotidiennement</option>
                    <option value="manual">Manuel uniquement</option>
                  </select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Heure de début</label>
                    <input
                      type="time"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      defaultValue="09:00"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Timeout (minutes)</label>
                    <input
                      type="number"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      defaultValue="30"
                      min="5"
                      max="120"
                    />
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    id="auto-restart"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    defaultChecked
                  />
                  <label htmlFor="auto-restart" className="text-sm text-gray-700">
                    Redémarrage automatique en cas d'échec
                  </label>
                </div>

                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    id="notifications"
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    defaultChecked
                  />
                  <label htmlFor="notifications" className="text-sm text-gray-700">
                    Notifications par email en cas d'erreur
                  </label>
                </div>

                <div className="flex justify-end gap-3 pt-4 border-t">
                  <button 
                    type="button"
                    onClick={() => setShowJobModal(false)}
                    className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Annuler
                  </button>
                  <button 
                    type="submit"
                    className="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
                    onClick={(e) => {
                      e.preventDefault();
                      setShowJobModal(false);
                      // Ajouter la logique de création de tâche ici
                    }}
                  >
                    Créer la tâche
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
     </div>
      )};
      export default ImportSyncModule;

# File: ./src\components\module1\ListEntreprise.tsx
import React, { useState } from 'react';
import { Building2, Plus, Edit, Trash2, Mail, Phone, MapPin, Save, X } from 'lucide-react';
import api from '../../api';

  const EnterpriseCard = ({ enterprise, onEdit, onDelete }) => (
    <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className="bg-blue-100 p-2 rounded-lg">
            <Building2 className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{enterprise.name}</h3>
            <span className="text-sm text-gray-500">{enterprise.sector}</span>
          </div>
        </div>
        <div className="flex space-x-2">
          {enterprise.isOwner && (
            <>
              <button
                onClick={() => onEdit(enterprise)}
                className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
              >
                <Edit className="w-4 h-4" />
              </button>
              <button
                onClick={() => onDelete(enterprise.id)}
                className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </>
          )}
        </div>
      </div>
      
      <div className="space-y-2 text-sm text-gray-600">
        <div className="flex items-center space-x-2">
          <MapPin className="w-4 h-4" />
          <span>{enterprise.address}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Phone className="w-4 h-4" />
          <span>{enterprise.phone}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Mail className="w-4 h-4" />
          <span>{enterprise.email}</span>
        </div>
        {/*  
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>size:</label>
          <span>{enterprise.size}</span>
        </div>*/}
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>ville:</label>
          <span>{enterprise.city}</span>
        </div>
        {/*  
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>PostalCode:</label>
          <span>{enterprise.postalCode}</span>
        </div>*/}
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>pays:</label>
          <span>{enterprise.country}</span>
        </div>
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>website:</label>          
          <span>{enterprise.website}</span>
        </div>
        {/*  
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>taxId:</label>          
          <span>{enterprise.taxId}</span>
        </div>
        <div className="flex items-center space-x-2">
          <label className='font-semibold'>registrationNumber:</label>          
          <span>{enterprise.registrationNumber}</span>
        </div>*/}
        <div className="flex items-center justify-between mt-4">
          <span className={`px-2 py-1 rounded-full text-xs ${
            enterprise.isOwner 
              ? 'bg-blue-100 text-blue-800' 
              : 'bg-gray-100 text-gray-800'
          }`}>
            {enterprise.isOwner ? 'Propriétaire' : 'Membre'}
          </span>
        </div>
      </div>
    </div>
  );

  const EnterpriseForm = ({ data, onChange, onSubmit, onCancel, title }) => {
    return(
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-2xl mx-auto">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">{title}</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Nom de l'entreprise *
            </label>
            <input
              type="text"
              value={data.nom}
              onChange={(e) => onChange({ ...data, nom: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: Distribution Centrale SARL"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Secteur d'activité *
            </label>
            <select
              value={data.secteur_activite}
              onChange={(e) => onChange({ ...data, secteur_activite: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="Distribution">Distribution</option>
              <option value="Retail">Retail</option>
              <option value="E-commerce">E-commerce</option>
              <option value="Manufacturing">Manufacturing</option>
              <option value="Pharmacie">Pharmacie</option>
              <option value="Autre">Autre</option>
            </select>
          </div>
          {/*
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Taille de l'entreprise *
            </label>
            <input
              type="text"
              value={data.size}
              onChange={(e) => onChange({ ...data, size: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: 250-500 employés"
            />
          </div>
          
           <div className="md:col-span-2"> 
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Numéro de SIRET *
            </label>
            <input
              type="text"
              value={data.registrationNumber}
              onChange={(e) => onChange({ ...data, registrationNumber: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: 123 456 789 RCS Paris"
            />
          </div>*/}
          
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Adresse *
            </label>
            <input
              type="text"
              value={data.address}
              onChange={(e) => onChange({ ...data, address: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: Avenue Kennedy, Douala, Cameroun"
            />
          </div>
          {/*  
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Code postal *
            </label>
            <input
              type="tel"
              value={data.postalCode}
              onChange={(e) => onChange({ ...data, postalCode: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="75008"
            />
          </div>
          */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Pays
            </label>
            <input
              type="tel"
              value={data.pays}
              onChange={(e) => onChange({ ...data, pays: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="France"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ville 
            </label>
            <input
              type="text"
              value={data.ville}
              onChange={(e) => onChange({ ...data, ville: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Paris"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Téléphone
            </label>
            <input
              type="tel"
              value={data.telephone}
              onChange={(e) => onChange({ ...data, telephone: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="+237 233 42 15 78"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email *
            </label>
            <input
              type="email"
              value={data.email}
              onChange={(e) => onChange({ ...data, email: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="contact@entreprise.cm"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Site web 
            </label>
            <input
              type="text"
              value={data.site_web}
              onChange={(e) => onChange({ ...data, site_web: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: www.techcorp-solutions.fr"
            />
          </div>
          {/*  
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Numéro de TVA *
            </label>
            <input
              type="text"
              value={data.taxId}
              onChange={(e) => onChange({ ...data, taxId: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ex: FR12345678901"
            />
          </div>*/}
        </div>
        
        <div className="flex justify-end space-x-4 mt-6">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
          >
            <X className="w-4 h-4 inline mr-2" />
            Annuler
          </button>
          <button
            onClick={onSubmit}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            <Save className="w-4 h-4 inline mr-2" />
            Enregistrer
          </button>
        </div>
      </div>
    );
  };

const ListEntreprises = () => {
  const [enterprises, setEnterprises] = useState([
    {
      id: 1,
      name: "Distribution Centrale SARL",
      sector: 'Technologie',
      size: '250-500 employés',
      address: '123 Avenue des Champs-Élysées',
      city: 'Paris',
      postalCode: '75008',
      country: 'France',
      phone: '+33 1 23 45 67 89',
      email: 'contact@techcorp-solutions.fr',
      website: 'www.techcorp-solutions.fr',
      taxId: 'FR12345678901',
      registrationNumber: '123 456 789 RCS Paris',
      isOwner: true
    }
  ]);
  const [editingEnterprise, setEditingEnterprise] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    nom: '',
    nom_commercial: '',
    adresse: '',
    ville: 'Douala',
    pays: 'Cameroun',
    telephone: '',
    email: '',
    site_web: '',
    secteur_activite: 'Distribution',
    nombre_sku: '',
    devise: 'FCFA',
    fuseau_horaire: 'Africa/Douala',
    langue: 'fr'
  });

  const handleCreateEnterprise = async () => {
    // if (!formData.nom || !formData.adresse || !formData.telephone || !formData.email) {
    //   alert("Les champs obligatoires sont : nom, adresse, téléphone, email.");
    //   return;
    // }

    try {
        const payload = {
          ...formData,
          nombre_sku: formData.nombre_sku ? parseInt(formData.nombre_sku) : null,
        };

        const response = await api.post('/companies/', payload);

        const createdCompany = response.data;

        setEnterprises([
          ...enterprises,
          {
            // id: createdCompany.id,
            nom: createdCompany.nom,
            secteur_activite: createdCompany.secteur_activite,
            adresse: createdCompany.adresse,
            ville: createdCompany.ville,
            pays: createdCompany.pays,
            telephone: createdCompany.telephone,
            email: createdCompany.email,
            site_web: createdCompany.site_web,
            isOwner: true
          }
        ]);

        // Reset du formulaire
        setFormData({
          nom: '',
          nom_commercial: '',
          adresse: '',
          ville: 'Douala',
          pays: 'Cameroun',
          telephone: '',
          email: '',
          site_web: '',
          secteur_activite: 'Distribution',
          nombre_sku: '',
          devise: 'FCFA',
          fuseau_horaire: 'Africa/Douala',
          langue: 'fr'
        });

        setShowCreateForm(false);
    } catch (error: any) {
      console.error("Erreur API:", error);
      alert(error?.response?.data?.detail || "Erreur lors de la création de l'entreprise.");
    }
  };



  const handleUpdateEnterprise = () => {
    if (editingEnterprise) {
      setEnterprises(enterprises.map(ent => 
        ent.id === editingEnterprise.id ? editingEnterprise : ent
      ));
      setEditingEnterprise(null);
    }
  };

  const handleDeleteEnterprise = (id) => {
    setEnterprises(enterprises.filter(ent => ent.id !== id));
  };

  return (
    <div className="">

      <div className="container mx-auto px-4 py-8">
          <div>
            <div className="flex items-center justify-between mb-8">
              <h2 className="text-3xl font-bold text-gray-900">
                Entreprises Associées
              </h2>
              <button
                onClick={() => setShowCreateForm(true)}
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-5 h-5" />
                <span>Nouvelle entreprise</span>
              </button>
            </div>

            {showCreateForm && (
            <div className="fixed inset-0 bg-black/25 bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white rounded-lg shadow-xl p-6 max-w-2xl w-full mx-4">
                    <EnterpriseForm
                    data={formData}
                    onChange={setFormData}
                    onSubmit={handleCreateEnterprise}
                    onCancel={() => setShowCreateForm(false)}
                    title="Créer une nouvelle entreprise"
                    />
                </div>
            </div>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {enterprises.map((enterprise) => (
                <EnterpriseCard
                  key={enterprise.id}
                  enterprise={enterprise}
                  onEdit={(ent) => setEditingEnterprise(ent)}
                  onDelete={handleDeleteEnterprise}
                />
              ))}
            </div>
          </div>

        {editingEnterprise && (
          <div className="fixed inset-0 bg-black/25 bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl p-6 max-w-2xl w-full mx-4">
              <EnterpriseForm
                data={editingEnterprise}
                onChange={setEditingEnterprise}
                onSubmit={handleUpdateEnterprise}
                onCancel={() => setEditingEnterprise(null)}
                title="Modifier l'entreprise"
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ListEntreprises;

# File: ./src\components\module1\ProductCatalog.tsx
import React, { useState } from 'react';
import { Search, Plus, Upload, Download, Edit3, Trash2 } from 'lucide-react';

const ProductCatalog = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [categoryFilter, setCategoryFilter] = useState('');
    const [stockFilter, setStockFilter] = useState('');

    const [showModal, setShowModal] = useState(false);
    const [modalType, setModalType] = useState('create');
    const [formData, setFormData] = useState();

      const handleEditUser = () => {
        setModalType('edit');
        setFormData();
        setShowModal(true);
    };
    const products = [
        // Ajoutez vos données de produits ici
        {
            id: 1,
            sku: 'ELE-001-2024',
            name: 'Smartphone Samsung Galaxy S24',
            category: 'Électronique',
            description: 'Smartphone dernière génération 256GB',
            costPrice: 650.00,
            sellPrice: 899.00,
            currentStock: 45,
            minStock: 10,
            maxStock: 100,
            weight: 0.168,
            stockStatus: 'good',
        },
        // Ajoutez d'autres produits ici
    ];

    const filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) || product.sku.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = !categoryFilter || product.category === categoryFilter;
        const matchesStock = !stockFilter || (stockFilter === 'low' && product.currentStock < product.minStock) || (stockFilter === 'good' && product.currentStock >= product.minStock);

        return matchesSearch && matchesCategory && matchesStock;
    });

    const handleAddProduct = () => {
        setModalType('create');
        setFormData();
        setShowModal(true);
    };

    const handleImport = () => {
        // Logique pour importer des produits
    };

    const handleExport = () => {
        // Logique pour exporter le catalogue
    };

    return (
        <div className="p-6">
            <div className="mb-8">
                <div className="flex items-center justify-between">
                    <h1 className="text-3xl font-bold text-gray-900">📦 Catalogue Produits</h1>
                </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-100 mb-8 p-6">
                <div className="flex items-center mb-4">
                    <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                        <input
                            type="text"
                            placeholder="Rechercher par nom, SKU, code-barres..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-85 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                    </div>
                    <select className="p-2 ml-4 border border-gray-300 rounded-lg" value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                        <option value="">Toutes les catégories</option>
                        <option value="electronique">Électronique</option>
                        <option value="textile">Textile</option>
                        <option value="alimentaire">Alimentaire</option>
                        <option value="bricolage">Bricolage</option>
                    </select>
                    <select className="p-2 ml-4 border border-gray-300 rounded-lg" value={stockFilter} onChange={(e) => setStockFilter(e.target.value)}>
                        <option value="">Tous les stocks</option>
                        <option value="good">Stock normal</option>
                        <option value="low">Stock bas</option>
                        <option value="out">Rupture</option>
                    </select>
                </div>

                <div className="flex space-x-2">
                    <button className="bg-blue-600 text-white px-4 py-2 rounded-lg" onClick={handleImport}>
                        <Upload className="w-4 h-4 mr-2" /> Importer
                    </button>
                    <button className="bg-blue-600 text-white px-4 py-2 rounded-lg" onClick={handleExport}>
                        <Download className="w-4 h-4 mr-2" /> Exporter
                    </button>
                    <button className="bg-green-600 text-white px-4 py-2 rounded-lg" onClick={handleAddProduct}>
                        <Plus className="w-4 h-4 mr-2" /> Nouveau Produit
                    </button>
                </div>
            </div>
            
            {/* Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black/25 bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    {modalType === 'create' ? 'Ajouter un nouveau produit' : 'Modifier le produit'}
                    </h3>
                    
                    <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                        Nom
                        </label>
                        <input
                        type="text"
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Ex: ordinateur"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                        Sku
                        </label>
                        <input
                        type="text"
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Ex: ELE-001-2024"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                        prix
                        </label>
                        <input
                        type="text"
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Ex: 899.00 €"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                        Qte
                        </label>
                        <input
                        type="number"
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Ex: 10"
                        />
                    </div>

                    <div className="flex items-center space-x-4 pt-4">
                        <button
                        type="button"
                        className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium transition-colors"
                        >
                        {modalType === 'create' ? 'Ajouter' : 'Modifier'}
                        </button>
                        <button
                        type="button"
                        onClick={() => setShowModal(false)}
                        className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded-lg font-medium transition-colors"
                        >
                        Annuler
                        </button>
                    </div>
                    </div>
                </div>
                </div>
            )}

            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nom</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">SKU</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Prix de vente</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Stock actuel</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {filteredProducts.map(product => (
                                <tr key={product.id}>
                                    <td className="px-6 py-4">{product.name}</td>
                                    <td className="px-6 py-4">{product.sku}</td>
                                    <td className="px-6 py-4">{product.sellPrice.toFixed(2)} €</td>
                                    <td className="px-6 py-4">{product.currentStock}</td>
                                    <td className="px-6 py-4">
                                        <button
                                        onClick={() => handleEditUser()}
                                        className="text-blue-600 hover:text-blue-900"> <Edit3 size={16} /> </button>
                                        <button className="text-red-600 hover:text-red-900 ml-2"> <Trash2 size={16} /> </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default ProductCatalog;

# File: ./src\components\module1\UserRoleManagement.tsx
import React, { useState } from 'react';
import { Plus, Search, Edit3, Trash2, Mail, Shield, Users, UserCheck, AlertCircle, Lock, Eye, EyeOff } from 'lucide-react';

const UserRoleManagement = () => {
  const [users, setUsers] = useState([
    {
      id: 1,
      name: 'Jean Mbarga',
      email: 'jean.mbarga@entreprise.cm',
      role: 'Admin',
      status: 'Actif',
      lastLogin: '2025-06-20 14:30',
      dateCreated: '2025-01-15'
    },
    {
      id: 2,
      name: 'Marie Fotso',
      email: 'marie.fotso@entreprise.cm',
      role: 'Utilisateur Standard',
      status: 'Actif',
      lastLogin: '2025-06-22 09:15',
      dateCreated: '2025-02-10'
    },
    {
      id: 3,
      name: 'Paul Nkomo',
      email: 'paul.nkomo@entreprise.cm',
      role: 'Utilisateur Standard',
      status: 'Inactif',
      lastLogin: '2025-06-10 16:45',
      dateCreated: '2025-03-05'
    }
  ]);

  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState('create'); // 'create' or 'edit'
  const [selectedUser, setSelectedUser] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('Tous');
  const [showPassword, setShowPassword] = useState(false);

  const [formData, setFormData] = useState({
    name: '',
    password: '',
    email: '',
    role: 'Utilisateur Standard',
    sendInvite: true
  });

  const roles = [
    {
      name: 'Admin',
      description: 'Accès complet à toutes les fonctionnalités, gestion des utilisateurs et facturation',
      color: 'bg-purple-100 text-purple-800',
      icon: Shield
    },
    {
      name: 'Utilisateur Standard',
      description: 'Accès aux modules d\'analyse et d\'optimisation, sans paramètres critiques',
      color: 'bg-blue-100 text-blue-800',
      icon: Users
    }
  ];

  const handleCreateUser = () => {
    setModalType('create');
    setFormData({ name: '', email: '', role: 'Utilisateur Standard', sendInvite: true });
    setShowModal(true);
  };

  const handleEditUser = (user) => {
    setModalType('edit');
    setSelectedUser(user);
    setFormData({
      name: user.name,
      email: user.email,
      role: user.role,
      sendInvite: false
    });
    setShowModal(true);
  };

  const handleDeleteUser = (userId) => {
    if (window.confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
      setUsers(users.filter(user => user.id !== userId));
    }
  };

  const handleToggleStatus = (userId) => {
    setUsers(users.map(user => 
      user.id === userId 
        ? { ...user, status: user.status === 'Actif' ? 'Inactif' : 'Actif' }
        : user
    ));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (modalType === 'create') {
      const newUser = {
        id: users.length + 1,
        name: formData.name,
        email: formData.email,
        role: formData.role,
        status: 'Actif',
        lastLogin: 'Jamais connecté',
        dateCreated: new Date().toISOString().split('T')[0]
      };
      setUsers([...users, newUser]);
    } else {
      setUsers(users.map(user => 
        user.id === selectedUser.id 
          ? { ...user, name: formData.name, email: formData.email, role: formData.role }
          : user
      ));
    }
    setShowModal(false);
  };

  const filteredUsers = users.filter(user => {
    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRole = roleFilter === 'Tous' || user.role === roleFilter;
    return matchesSearch && matchesRole;
  });

  const getStatusBadge = (status) => {
    return status === 'Actif' 
      ? 'bg-green-100 text-green-800' 
      : 'bg-red-100 text-red-800';
  };

  const getRoleBadge = (role) => {
    const roleInfo = roles.find(r => r.name === role);
    return roleInfo ? roleInfo.color : 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center">
              <Users className="mr-3 text-blue-600" size={32} />
              Gestion des Utilisateurs et Rôles
            </h1>
            <p className="text-gray-600 mt-2">
              Gérez les accès et permissions de votre équipe InventoryAI Enterprise
            </p>
          </div>
          <button
            onClick={handleCreateUser}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center font-medium transition-colors"
          >
            <Plus className="mr-2" size={20} />
            Inviter un utilisateur
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-500 text-sm font-medium">Total Utilisateurs</p>
              <p className="text-2xl font-bold text-gray-900">{users.length}</p>
            </div>
            <div className="bg-blue-100 p-3 rounded-lg">
              <Users className="text-blue-600" size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-500 text-sm font-medium">Utilisateurs Actifs</p>
              <p className="text-2xl font-bold text-green-600">
                {users.filter(u => u.status === 'Actif').length}
              </p>
            </div>
            <div className="bg-green-100 p-3 rounded-lg">
              <UserCheck className="text-green-600" size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-500 text-sm font-medium">Administrateurs</p>
              <p className="text-2xl font-bold text-purple-600">
                {users.filter(u => u.role === 'Admin').length}
              </p>
            </div>
            <div className="bg-purple-100 p-3 rounded-lg">
              <Shield className="text-purple-600" size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-500 text-sm font-medium">Invitations Pending</p>
              <p className="text-2xl font-bold text-orange-600">0</p>
            </div>
            <div className="bg-orange-100 p-3 rounded-lg">
              <Mail className="text-orange-600" size={24} />
            </div>
          </div>
        </div>
      </div>

      {/* Roles Information */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 mb-8">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Rôles et Permissions</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {roles.map((role, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center">
                  <role.icon className="mr-2 text-gray-600" size={20} />
                  <span className="font-medium text-gray-900">{role.name}</span>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${role.color}`}>
                  {users.filter(u => u.role === role.name).length} utilisateur(s)
                </span>
              </div>
              <p className="text-sm text-gray-600">{role.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100 mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
          <div className="flex items-center space-x-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
              <input
                type="text"
                placeholder="Rechercher par nom ou email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-80"
              />
            </div>
            <select
              value={roleFilter}
              onChange={(e) => setRoleFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="Tous">Tous les rôles</option>
              <option value="Admin">Admin</option>
              <option value="Utilisateur Standard">Utilisateur Standard</option>
            </select>
          </div>
          <div className="text-sm text-gray-500">
            {filteredUsers.length} utilisateur(s) affiché(s)
          </div>
        </div>
      </div>

      {/* Users Table */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Utilisateur
                </th>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Rôle
                </th>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Statut
                </th>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Dernière Connexion
                </th>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date de Création
                </th>
                <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredUsers.map((user, index) => (
                <tr key={user.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center text-white font-medium">
                        {user.name.split(' ').map(n => n[0]).join('')}
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">{user.name}</div>
                        <div className="text-sm text-gray-500">{user.email}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getRoleBadge(user.role)}`}>
                      {user.role}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusBadge(user.status)}`}>
                      {user.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {user.lastLogin}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {user.dateCreated}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex items-center space-x-3">
                      <button
                        onClick={() => handleEditUser(user)}
                        className="text-blue-600 hover:text-blue-800 transition-colors"
                        title="Modifier"
                      >
                        <Edit3 size={16} />
                      </button>
                      <button
                        onClick={() => handleToggleStatus(user.id)}
                        className={`transition-colors ${user.status === 'Actif' ? 'text-red-600 hover:text-red-800' : 'text-green-600 hover:text-green-800'}`}
                        title={user.status === 'Actif' ? 'Désactiver' : 'Activer'}
                      >
                        {user.status === 'Actif' ? <EyeOff size={16} /> : <Eye size={16} />}
                      </button>
                      <button
                        onClick={() => handleDeleteUser(user.id)}
                        className="text-red-600 hover:text-red-800 transition-colors"
                        title="Supprimer"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black/25 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              {modalType === 'create' ? 'Inviter un nouvel utilisateur' : 'Modifier l\'utilisateur'}
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nom complet *
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Ex: Jean Mbarga"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Mot de passe *
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type={showPassword ? "text" : "password"}
                    value={formData.password}
                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                    className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="••••••••"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Adresse email *
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="exemple@entreprise.cm"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Rôle *
                </label>
                <select
                  value={formData.role}
                  onChange={(e) => setFormData({...formData, role: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="Utilisateur Standard">Utilisateur Standard</option>
                  <option value="Admin">Admin</option>
                </select>
                <div className="mt-2 p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-800">
                    {roles.find(r => r.name === formData.role)?.description}
                  </p>
                </div>
              </div>

              {modalType === 'create' && (
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="sendInvite"
                    checked={formData.sendInvite}
                    onChange={(e) => setFormData({...formData, sendInvite: e.target.checked})}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="sendInvite" className="ml-2 text-sm text-gray-700">
                    Envoyer un email d'invitation
                  </label>
                </div>
              )}

              <div className="flex items-center space-x-4 pt-4">
                <button
                  type="button"
                  onClick={handleSubmit}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium transition-colors"
                >
                  {modalType === 'create' ? 'Inviter' : 'Modifier'}
                </button>
                <button
                  type="button"
                  onClick={() => setShowModal(false)}
                  className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded-lg font-medium transition-colors"
                >
                  Annuler
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserRoleManagement;

# File: ./src\pages\PredictionDashboard.tsx
import React, { useState, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart } from 'recharts';
import { TrendingUp, Calendar, Package, AlertCircle, Search, Filter } from 'lucide-react';

// Types TypeScript
interface ProductData {
  id: string;
  name: string;
  category: string;
  sku: string;
}

interface PredictionData {
  date: string;
  actualSales: number | null;
  prediction: number;
  confidenceMin: number;
  confidenceMax: number;
}

// Données mockées pour la démonstration
const mockProducts: ProductData[] = [
  { id: '1', name: 'Coca-Cola 33cl', category: 'Boissons', sku: 'CC-33CL-001' },
  { id: '2', name: 'Riz Uncle Ben\'s 1kg', category: 'Alimentaire', sku: 'RIZ-UB-1KG' },
  { id: '3', name: 'Savon Lux 90g', category: 'Hygiène', sku: 'SAV-LUX-90' },
  { id: '4', name: 'Huile Frytol 1L', category: 'Alimentaire', sku: 'HUI-FRY-1L' },
];

// Générer des données de prédiction mockées
const generateMockData = (): PredictionData[] => {
  const data: PredictionData[] = [];
  const today = new Date();
  
  // Données historiques (30 derniers jours)
  for (let i = 30; i >= 1; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);
    const baseValue = 150 + Math.sin(i * 0.2) * 30;
    data.push({
      date: date.toISOString().split('T')[0],
      actualSales: Math.floor(baseValue + (Math.random() - 0.5) * 40),
      prediction: Math.floor(baseValue),
      confidenceMin: Math.floor(baseValue * 0.85),
      confidenceMax: Math.floor(baseValue * 1.15),
    });
  }
  
  // Données prédictives (90 prochains jours)
  for (let i = 1; i <= 90; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() + i);
    const seasonality = 1 + Math.sin(i * 0.1) * 0.3;
    const trend = 1 + i * 0.002;
    const baseValue = 150 * seasonality * trend;
    data.push({
      date: date.toISOString().split('T')[0],
      actualSales: null,
      prediction: Math.floor(baseValue),
      confidenceMin: Math.floor(baseValue * 0.75),
      confidenceMax: Math.floor(baseValue * 1.25),
    });
  }
  
  return data;
};

const PredictionDashboard: React.FC = () => {
  const [selectedProduct, setSelectedProduct] = useState<ProductData>(mockProducts[0]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const predictionData = useMemo(() => generateMockData(), [selectedProduct]);
  
  const categories = ['all', ...Array.from(new Set(mockProducts.map(p => p.category)))];
  
  const filteredProducts = mockProducts.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Calcul de la précision du modèle (données historiques uniquement)
  const modelAccuracy = useMemo(() => {
    const historicalData = predictionData.filter(d => d.actualSales !== null);
    if (historicalData.length === 0) return 0;
    
    const mape = historicalData.reduce((acc, point) => {
      const error = Math.abs((point.actualSales! - point.prediction) / point.actualSales!) * 100;
      return acc + error;
    }, 0) / historicalData.length;
    
    return Math.max(0, 100 - mape);
  }, [predictionData]);

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-white p-4 border border-gray-200 rounded-lg shadow-lg">
          <p className="font-medium text-gray-900">{`Date: ${new Date(label).toLocaleDateString('fr-FR')}`}</p>
          {data.actualSales !== null && (
            <p className="text-blue-600">{`Ventes réelles: ${data.actualSales} unités`}</p>
          )}
          <p className="text-green-600">{`Prédiction: ${data.prediction} unités`}</p>
          <p className="text-gray-500 text-sm">{`Intervalle: ${data.confidenceMin} - ${data.confidenceMax}`}</p>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">InventoryAI Enterprise</h1>
              <p className="text-sm text-gray-600">Dashboard de Prédictions de Demande</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <Calendar className="w-4 h-4" />
                <span>{new Date().toLocaleDateString('fr-FR')}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Sidebar - Sélection de produit */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Package className="w-5 h-5 mr-2" />
                Sélection Produit
              </h3>
              
              {/* Recherche */}
              <div className="relative mb-4">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Rechercher un produit..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>

              {/* Filtre par catégorie */}
              <div className="mb-4">
                <select
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                >
                  {categories.map(category => (
                    <option key={category} value={category}>
                      {category === 'all' ? 'Toutes catégories' : category}
                    </option>
                  ))}
                </select>
              </div>

              {/* Liste des produits */}
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {filteredProducts.map(product => (
                  <div
                    key={product.id}
                    className={`p-3 rounded-lg cursor-pointer transition-colors ${
                      selectedProduct.id === product.id 
                        ? 'bg-blue-50 border-2 border-blue-200' 
                        : 'hover:bg-gray-50 border border-gray-200'
                    }`}
                    onClick={() => setSelectedProduct(product)}
                  >
                    <p className="font-medium text-gray-900 text-sm">{product.name}</p>
                    <p className="text-xs text-gray-500">SKU: {product.sku}</p>
                    <p className="text-xs text-blue-600">{product.category}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Contenu principal */}
          <div className="lg:col-span-3">
            
            {/* En-tête du produit sélectionné */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-xl font-bold text-gray-900">{selectedProduct.name}</h2>
                  <p className="text-sm text-gray-600">SKU: {selectedProduct.sku} • Catégorie: {selectedProduct.category}</p>
                </div>
                <div className="text-right">
                  <div className="flex items-center space-x-2">
                    <TrendingUp className="w-5 h-5 text-green-500" />
                    <span className="text-lg font-semibold text-green-600">
                      {modelAccuracy.toFixed(1)}% de précision
                    </span>
                  </div>
                  <p className="text-xs text-gray-500">Précision du modèle</p>
                </div>
              </div>
            </div>

            {/* Graphique principal */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-lg font-semibold text-gray-900">
                  Historique et Prédictions de Demande
                </h3>
                <div className="flex items-center space-x-4 text-sm">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-blue-500 rounded"></div>
                    <span>Ventes réelles</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded"></div>
                    <span>Prédictions</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-200 rounded"></div>
                    <span>Intervalle de confiance</span>
                  </div>
                </div>
              </div>

              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={predictionData}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis 
                      dataKey="date" 
                      tickFormatter={(date) => new Date(date).toLocaleDateString('fr-FR', { month: 'short', day: 'numeric' })}
                      className="text-xs"
                    />
                    <YAxis className="text-xs" />
                    <Tooltip content={<CustomTooltip />} />
                    
                    {/* Zone de confiance */}
                    <Area
                      type="monotone"
                      dataKey="confidenceMax"
                      stroke="none"
                      fill="#10B981"
                      fillOpacity={0.1}
                    />
                    <Area
                      type="monotone"
                      dataKey="confidenceMin"
                      stroke="none"
                      fill="#ffffff"
                      fillOpacity={1}
                    />
                    
                    {/* Ligne de prédiction */}
                    <Line
                      type="monotone"
                      dataKey="prediction"
                      stroke="#10B981"
                      strokeWidth={2}
                      dot={false}
                      strokeDasharray="5 5"
                    />
                    
                    {/* Ligne des ventes réelles */}
                    <Line
                      type="monotone"
                      dataKey="actualSales"
                      stroke="#3B82F6"
                      strokeWidth={3}
                      dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}
                      connectNulls={false}
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Explicabilité simplifiée */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <AlertCircle className="w-5 h-5 mr-2 text-blue-500" />
                Analyse des Facteurs d'Influence
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">Tendance Générale</h4>
                  <p className="text-sm text-blue-800">
                    Croissance modérée observée (+2% par rapport au mois dernier). 
                    Le produit maintient une demande stable avec des pics saisonniers identifiés.
                  </p>
                </div>
                
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-2">Saisonnalité</h4>
                  <p className="text-sm text-green-800">
                    Forte saisonnalité détectée en fin de mois (effet paie des fonctionnaires). 
                    Pic attendu autour du 25-30 de chaque mois.
                  </p>
                </div>
                
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <h4 className="font-medium text-yellow-900 mb-2">Événements Spéciaux</h4>
                  <p className="text-sm text-yellow-800">
                    Fête de la Jeunesse (20 Mai) approchant. 
                    Augmentation de +15% de la demande prévue durant cette période.
                  </p>
                </div>
                
                <div className="bg-purple-50 p-4 rounded-lg">
                  <h4 className="font-medium text-purple-900 mb-2">Confiance du Modèle</h4>
                  <p className="text-sm text-purple-800">
                    Modèle très fiable avec {modelAccuracy.toFixed(1)}% de précision. 
                    Intervalles de confiance serrés indiquent une prédiction robuste.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PredictionDashboard;

# File: ./src\pages\PredictionExplanation.tsx
import React, { useState, useEffect } from 'react';
import { 
  Brain, 
  TrendingUp, 
  Calendar, 
  Users, 
  Zap, 
  BarChart3,
  AlertTriangle,
  Info,
  CheckCircle,
  XCircle,
  HelpCircle,
  Settings,
  Eye,
  Target,
  Activity
} from 'lucide-react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  Area,
  AreaChart
} from 'recharts';

// Données de démonstration pour l'explication
const mockExplanationData = {
  productId: 1,
  productName: "Smartphone Galaxy S24",
  prediction: {
    next30Days: 1247,
    confidence: 92,
    modelVersion: "v2.3.1"
  },
  factors: [
    {
      name: "Tendance saisonnière",
      impact: 35,
      direction: "positive",
      description: "Forte demande attendue en période de rentrée",
      confidence: 94
    },
    {
      name: "Historique des ventes",
      impact: 28,
      direction: "positive", 
      description: "Croissance constante sur les 6 derniers mois",
      confidence: 89
    },
    {
      name: "Événements marketing",
      impact: 22,
      direction: "positive",
      description: "Campagne publicitaire prévue la semaine prochaine",
      confidence: 87
    },
    {
      name: "Stock concurrent",
      impact: 12,
      direction: "negative",
      description: "Concurrents en rupture de stock sur produits similaires",
      confidence: 76
    },
    {
      name: "Prix du marché",
      impact: 8,
      direction: "neutral",
      description: "Prix stable par rapport à la concurrence",
      confidence: 82
    }
  ],
  modelMetrics: {
    accuracy: 92,
    precision: 89,
    recall: 94,
    f1Score: 91,
    mape: 8.5
  },
  dataQuality: {
    completeness: 96,
    consistency: 94,
    accuracy: 91,
    timeliness: 98
  },
  risks: [
    {
      type: "high",
      title: "Rupture fournisseur",
      probability: 15,
      impact: "Retard de livraison possible",
      mitigation: "Diversifier les fournisseurs"
    },
    {
      type: "medium", 
      title: "Changement réglementaire",
      probability: 25,
      impact: "Impact sur les importations",
      mitigation: "Surveiller les évolutions légales"
    },
    {
      type: "low",
      title: "Nouvelle concurrence",
      probability: 35,
      impact: "Pression sur les prix",
      mitigation: "Renforcer la différenciation"
    }
  ]
};

// Composant pour les facteurs d'influence
const InfluenceFactors = ({ factors }) => {
  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-purple-100 rounded-lg">
          <Brain className="w-5 h-5 text-purple-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Facteurs d'Influence</h3>
          <p className="text-sm text-gray-600">Éléments impactant la prédiction</p>
        </div>
      </div>

      <div className="space-y-4">
        {factors.map((factor, index) => (
          <div key={index} className="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center gap-3">
                <div className={`p-2 rounded-lg ${
                  factor.direction === 'positive' ? 'bg-green-100' :
                  factor.direction === 'negative' ? 'bg-red-100' : 'bg-gray-100'
                }`}>
                  {factor.direction === 'positive' ? 
                    <TrendingUp className="w-4 h-4 text-green-600" /> :
                    factor.direction === 'negative' ?
                    <AlertTriangle className="w-4 h-4 text-red-600" /> :
                    <Activity className="w-4 h-4 text-gray-600" />
                  }
                </div>
                <div>
                  <h4 className="font-medium text-gray-900">{factor.name}</h4>
                  <p className="text-sm text-gray-600">{factor.description}</p>
                </div>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-gray-900">{factor.impact}%</div>
                <div className="text-xs text-gray-500">Impact</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex-1 mr-4">
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full ${
                      factor.direction === 'positive' ? 'bg-green-500' :
                      factor.direction === 'negative' ? 'bg-red-500' : 'bg-gray-500'
                    }`}
                    style={{ width: `${factor.impact}%` }}
                  ></div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-xs text-gray-500">Confiance:</span>
                <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                  factor.confidence >= 90 ? 'bg-green-100 text-green-700' :
                  factor.confidence >= 80 ? 'bg-yellow-100 text-yellow-700' :
                  'bg-red-100 text-red-700'
                }`}>
                  {factor.confidence}%
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Composant pour les métriques du modèle
const ModelMetrics = ({ metrics }) => {
  const metricsData = [
    { name: 'Précision', value: metrics.accuracy, color: '#10b981', description: 'Pourcentage de prédictions correctes' },
    { name: 'Précision', value: metrics.precision, color: '#3b82f6', description: 'Rapport vrais positifs / positifs prédits' },
    { name: 'Rappel', value: metrics.recall, color: '#f59e0b', description: 'Rapport vrais positifs / positifs réels' },
    { name: 'F1-Score', value: metrics.f1Score, color: '#ef4444', description: 'Moyenne harmonique précision/rappel' }
  ];

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-blue-100 rounded-lg">
          <Target className="w-5 h-5 text-blue-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Performance du Modèle</h3>
          <p className="text-sm text-gray-600">Métriques de qualité de prédiction</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        {metricsData.map((metric, index) => (
          <div key={index} className="p-4 border border-gray-200 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <div 
                  className="w-3 h-3 rounded-full" 
                  style={{ backgroundColor: metric.color }}
                ></div>
                <span className="font-medium text-gray-900">{metric.name}</span>
              </div>
              <span className="text-xl font-bold" style={{ color: metric.color }}>
                {metric.value}%
              </span>
            </div>
            <p className="text-xs text-gray-600">{metric.description}</p>
            <div className="mt-2 w-full bg-gray-200 rounded-full h-1.5">
              <div 
                className="h-1.5 rounded-full transition-all duration-300"
                style={{ 
                  width: `${metric.value}%`,
                  backgroundColor: metric.color
                }}
              ></div>
            </div>
          </div>
        ))}
      </div>

      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-center gap-2 mb-2">
          <Info className="w-4 h-4 text-blue-600" />
          <span className="font-medium text-gray-900">MAPE (Erreur Absolue Moyenne)</span>
        </div>
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Plus la valeur est faible, plus le modèle est précis</span>
          <span className="text-lg font-bold text-blue-600">{metrics.mape}%</span>
        </div>
      </div>
    </div>
  );
};

// Composant pour la qualité des données
const DataQuality = ({ quality }) => {
  const qualityMetrics = [
    { name: 'Complétude', value: quality.completeness, icon: CheckCircle },
    { name: 'Cohérence', value: quality.consistency, icon: Settings },
    { name: 'Précision', value: quality.accuracy, icon: Target },
    { name: 'Actualité', value: quality.timeliness, icon: Calendar }
  ];

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-green-100 rounded-lg">
          <Eye className="w-5 h-5 text-green-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Qualité des Données</h3>
          <p className="text-sm text-gray-600">Indicateurs de fiabilité des données source</p>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        {qualityMetrics.map((metric, index) => {
          const Icon = metric.icon;
          return (
            <div key={index} className="text-center p-4 border border-gray-200 rounded-lg">
              <div className={`inline-flex p-3 rounded-full mb-3 ${
                metric.value >= 95 ? 'bg-green-100' :
                metric.value >= 85 ? 'bg-yellow-100' : 'bg-red-100'
              }`}>
                <Icon className={`w-5 h-5 ${
                  metric.value >= 95 ? 'text-green-600' :
                  metric.value >= 85 ? 'text-yellow-600' : 'text-red-600'
                }`} />
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{metric.value}%</div>
              <div className="text-sm text-gray-600">{metric.name}</div>
            </div>
          );
        })}
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <div className="flex items-start gap-3">
          <Info className="w-5 h-5 text-blue-600 mt-0.5" />
          <div>
            <h4 className="font-medium text-blue-900 mb-1">Recommandations</h4>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>• Améliorer la complétude des données historiques</li>
              <li>• Vérifier la cohérence des unités de mesure</li>
              <li>• Synchroniser plus fréquemment les données</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

// Composant pour l'analyse des risques
const RiskAnalysis = ({ risks }) => {
  const getRiskColor = (type) => {
    switch (type) {
      case 'high': return 'bg-red-100 text-red-700 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-700 border-green-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  const getRiskIcon = (type) => {
    switch (type) {
      case 'high': return <XCircle className="w-5 h-5" />;
      case 'medium': return <AlertTriangle className="w-5 h-5" />;
      case 'low': return <CheckCircle className="w-5 h-5" />;
      default: return <HelpCircle className="w-5 h-5" />;
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-orange-100 rounded-lg">
          <AlertTriangle className="w-5 h-5 text-orange-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Analyse des Risques</h3>
          <p className="text-sm text-gray-600">Facteurs pouvant affecter la prédiction</p>
        </div>
      </div>

      <div className="space-y-4">
        {risks.map((risk, index) => (
          <div key={index} className={`border rounded-lg p-4 ${getRiskColor(risk.type)}`}>
            <div className="flex items-start gap-3">
              <div className="flex-shrink-0 mt-1">
                {getRiskIcon(risk.type)}
              </div>
              <div className="flex-1">
                <div className="flex items-start justify-between mb-2">
                  <h4 className="font-medium">{risk.title}</h4>
                  <span className="text-sm font-medium px-2 py-1 bg-white rounded-full">
                    {risk.probability}%
                  </span>
                </div>
                <p className="text-sm mb-2">{risk.impact}</p>
                <div className="text-xs">
                  <span className="font-medium">Mitigation: </span>
                  {risk.mitigation}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Composant principal d'explication des prédictions
const PredictionExplanation = ({ productId, onClose }) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('factors');

  useEffect(() => {
    // Simuler le chargement des données d'explication
    setLoading(true);
    setTimeout(() => {
      setData(mockExplanationData);
      setLoading(false);
    }, 1000);
  }, [productId]);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-lg p-8">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-3"></div>
            <p className="text-gray-500">Analyse en cours...</p>
          </div>
        </div>
      </div>
    );
  }

  const tabs = [
    { id: 'factors', label: 'Facteurs d\'influence', icon: Brain },
    { id: 'metrics', label: 'Performance', icon: Target },
    { id: 'quality', label: 'Qualité données', icon: Eye },
    { id: 'risks', label: 'Analyse risques', icon: AlertTriangle }
  ];

  return (
    <div className="max-w-6xl mx-auto">
      {/* En-tête */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-bold text-gray-900 mb-2">
              Explication de la Prédiction
            </h2>
            <p className="text-gray-600">
              {data.productName} - Prédiction: <span className="font-semibold text-blue-600">
                {data.prediction.next30Days.toLocaleString()} unités
              </span> (Confiance: {data.prediction.confidence}%)
            </p>
          </div>
          <div className="flex items-center gap-3">
            <div className="text-right">
              <div className="text-sm text-gray-500">Modèle utilisé</div>
              <div className="font-medium text-gray-900">{data.prediction.modelVersion}</div>
            </div>
            {onClose && (
              <button
                onClick={onClose}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <XCircle className="w-5 h-5 text-gray-400" />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Navigation par onglets */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 py-4 px-1 border-b-2 text-sm font-medium transition-colors ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Contenu selon l'onglet actif */}
      <div className="space-y-6">
        {activeTab === 'factors' && <InfluenceFactors factors={data.factors} />}
        {activeTab === 'metrics' && <ModelMetrics metrics={data.modelMetrics} />}
        {activeTab === 'quality' && <DataQuality quality={data.dataQuality} />}
        {activeTab === 'risks' && <RiskAnalysis risks={data.risks} />}
      </div>
    </div>
  );
};

export default PredictionExplanation;

# File: ./src\styles\global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Variables personnalisées pour le thème */
:root {
  --primary-blue: #1e40af;
  --secondary-blue: #3b82f6;
  --accent-green: #10b981;
  --warning-orange: #f59e0b;
  --danger-red: #ef4444;
  --gray-light: #f8fafc;
  --gray-medium: #64748b;
  --gray-dark: #1e293b;
}

/* Styles de base */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, #root {
  height: 100%;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background-color: var(--gray-light);
  color: var(--gray-dark);
}

/* Composants personnalisés avec @apply */
@layer components {
  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
  }
  
  .btn-secondary {
    @apply bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2;
  }
  
  .card {
    @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;
  }
  
  .card-header {
    @apply border-b border-gray-200 pb-4 mb-6;
  }
  
  .input-field {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200;
  }
  
  .select-field {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 cursor-pointer;
  }
  
  .metric-card {
    @apply bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 hover:shadow-md transition-shadow duration-200;
  }
  
  .sidebar-item {
    @apply flex items-center px-4 py-3 text-gray-700 hover:bg-blue-50 hover:text-blue-700 rounded-lg transition-colors duration-200 cursor-pointer;
  }
  
  .sidebar-item-active {
    @apply bg-blue-100 text-blue-700 font-medium;
  }
  
  .chart-container {
    @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-96;
  }
  
  .loading-spinner {
    @apply animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600;
  }
  
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .badge-success {
    @apply bg-green-100 text-green-800;
  }
  
  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }
  
  .badge-danger {
    @apply bg-red-100 text-red-800;
  }
  
  .badge-info {
    @apply bg-blue-100 text-blue-800;
  }
}

/* Animations personnalisées */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}

.fade-in {
  animation: fadeIn 0.3s ease-out;
}

.slide-in {
  animation: slideIn 0.3s ease-out;
}

/* Styles pour les graphiques */
.chart-tooltip {
  @apply bg-gray-900 text-white text-sm rounded-lg px-3 py-2 shadow-lg;
}

.chart-legend {
  @apply flex items-center space-x-4 justify-center mt-4;
}

.legend-item {
  @apply flex items-center space-x-2 text-sm text-gray-600;
}

.legend-color {
  @apply w-3 h-3 rounded-full;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .card {
    @apply p-4;
  }
  
  .chart-container {
    @apply h-80;
  }
}

/* Scrollbar personnalisé */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

